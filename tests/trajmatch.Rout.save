
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
Welcome to pomp version 1.19!
pomp version 2 is now available on https://kingaa.github.io/pomp/.
This new version contains many improvements but is not backward compatible.
To allow users time to modify their codes, 'pomp' version 2 will be provided as package 'pomp2' for a short while.

Around the middle of 2019, 'pomp2' will be renamed 'pomp' version 2.1 and will be released to CRAN. Until then, 'pomp' versions < 2 will continue to be available.

See the 'pomp version 2 upgrade guide' at https://kingaa.github.io/pomp/.
> 
> set.seed(93885485L)
> 
> pompExample(ou2)
newly created object(s):
 ou2 
> true.p <- coef(ou2)
> simdata <- simulate(ou2,nsim=5,params=true.p,seed=394885)
> guess.p <- true.p
> 
> x <- ou2
> coef(x) <- numeric()
> try(trajectory(x))
Error : in 'trajectory': 'params' must be supplied
> try(trajectory(pomp(ou2,skeleton=NULL)))
Error : in 'trajectory': deterministic skeleton has not been properly specified
> pompExample(euler.sir)
newly created object(s):
 euler.sir 
> try(trajectory(euler.sir,atol=-100))
DLSODA-  ATOL(I1) is R1 .lt. 0.0        
In above message, I1 = 1
 
In above message, R1 = -100
 
Error : in 'trajectory': error in ODE integrator: illegal input detected before taking any integration steps - see written message
> 
> x <- sapply(
+     simdata,
+     function (d) {
+         res <- traj.match(
+             d,
+             start=guess.p,
+             est=c('alpha.1','alpha.4','x1.0','x2.0','tau'),
+             maxit=2000,
+             reltol=1e-8
+         )
+         c(conv=res$convergence,loglik=logLik(res),coef(res))
+     }
+ )
> range(x['conv',])
[1] 0 0
> range(x['loglik',])
[1] -687.0136 -614.8054
> print(
+     cbind(
+         truth=true.p,
+         mean.est=apply(x[names(true.p),],1,mean),
+         bias=apply(x[names(true.p),],1,mean)-true.p,
+         se=apply(x[names(true.p),],1,sd)
+     ),
+     digits=4
+ )
        truth mean.est     bias     se
alpha.1   0.8   0.7082 -0.09185 0.3813
alpha.2  -0.5  -0.5000  0.00000 0.0000
alpha.3   0.3   0.3000  0.00000 0.0000
alpha.4   0.9   0.9704  0.07039 0.2009
sigma.1   3.0   3.0000  0.00000 0.0000
sigma.2  -0.5  -0.5000  0.00000 0.0000
sigma.3   2.0   2.0000  0.00000 0.0000
tau       1.0   6.0401  5.04009 0.8810
x1.0     -3.0  -4.2514 -1.25144 2.0408
x2.0      4.0   4.2243  0.22427 6.3684
> 
> summary(traj.match(ou2,est=c('alpha.1','alpha.4','x1.0','x2.0','tau'),method="subplex",maxit=100))
$params
   alpha.1    alpha.2    alpha.3    alpha.4    sigma.1    sigma.2    sigma.3 
 0.8913424 -0.5000000  0.3000000  0.2309642  3.0000000 -0.5000000  2.0000000 
       tau       x1.0       x2.0 
 5.3538853 -2.6942832  9.5177620 

$loglik
[1] -619.7905

$eval
[1] 100

$convergence
[1] -1

$msg
[1] "number of function evaluations exceeds 'maxit'"

> 
> invisible(capture.output(summary(traj.match(ou2,est=c('alpha.1','x1.0','alpha.4','x2.0','tau'),method="sannbox",trace=4,parscale=0.1,maxit=100))))
> 
> try(traj.match(ou2,est=c('alpha.1','x1.0','alpha.4','x2.0','tau'),method="sannbox",parscale=0.1,maxit=100,sched=rep(1,10)))
Error : in 'sannbox': insufficiently many temperatures supplied in 'control$sched'
> 
> summary(traj.match(ou2,start=as.list(coef(ou2))))
$params
alpha.1 alpha.2 alpha.3 alpha.4 sigma.1 sigma.2 sigma.3     tau    x1.0    x2.0 
    0.8    -0.5     0.3     0.9     3.0    -0.5     2.0     1.0    -3.0     4.0 

$loglik
[1] -3327.081

$eval
[1] 1 0

$convergence
[1] NA

$msg
[1] "no optimization performed"

> ofun <- traj.match.objfun(ou2)
> try(traj.match.objfun(ou2,params=c("A")))
Error : in 'traj.match.objfun': 'params' must be a named numeric vector
> ofun <- traj.match.objfun(ou2,est=c('x1.0','x2.0','alpha.1','alpha.4','tau'),
+                           params=as.list(coef(ou2)))
> print(ofun(coef(ou2,c('x1.0','x2.0','alpha.1','alpha.4','tau'))))
[1] 3327.081
> 
> try(ofun <- traj.match.objfun(ou2,est=c('x1.0','x2.0','bob','alpha.4','harry')))
Error : in 'traj.match.objfun': parameter(s): 'bob','harry' not found in 'params'
> try(traj.match(ou2,est=c('x1.0','x2.0','bob','alpha.4','tau')))
Error : in 'minim': 'est' must refer to parameters named in 'start'
> 
> fit <- optim(par=c(0,0,1,0.5,0.5),fn=ofun,method="Nelder-Mead",control=list(maxit=400))
> print(fit)
$par
[1] -9.5099598  4.1108965  0.4597899  0.5755942  5.3362689

$value
[1] 618.6908

$counts
function gradient 
     386       NA 

$convergence
[1] 0

$message
NULL

> stopifnot(fit$convergence==0)
> 
> pompExample(ou2)
newly created object(s):
 ou2 
> p <- coef(ou2)
> ou2@params <- numeric(0)
> res <- traj.match(ou2,start=p)
> print(coef(res),digits=4)
alpha.1 alpha.2 alpha.3 alpha.4 sigma.1 sigma.2 sigma.3     tau    x1.0    x2.0 
    0.8    -0.5     0.3     0.9     3.0    -0.5     2.0     1.0    -3.0     4.0 
> res <- traj.match(res,est=c('alpha.1','alpha.4','x1.0','x2.0','tau'),maxit=2000,reltol=1e-8)
> print(coef(res),digits=4)
 alpha.1  alpha.2  alpha.3  alpha.4  sigma.1  sigma.2  sigma.3      tau 
 0.09353 -0.50000  0.30000  0.98212  3.00000 -0.50000  2.00000  5.36145 
    x1.0     x2.0 
-3.26255  2.17644 
> print(p,digits=4)
alpha.1 alpha.2 alpha.3 alpha.4 sigma.1 sigma.2 sigma.3     tau    x1.0    x2.0 
    0.8    -0.5     0.3     0.9     3.0    -0.5     2.0     1.0    -3.0     4.0 
> traj.match(res) -> res
> 
> pomp(ou2,skeleton=map(function (x, t, params, ...) {unname(x+1)})) -> po
> trajectory(po,params=p,t0=-10,as.data.frame=TRUE) -> x
> sapply(x[,1:2],range)
      x1  x2
[1,]   8  15
[2,] 107 114
> 
> pp <- p
> pp[c("alpha.1","alpha.2","x1.0","x2.0","tau")] <- c(1,-1,-5,5,2)
> traj.match(ou2,start=pp,est=c("alpha.1","alpha.2","x1.0","x2.0","tau"),
+            method="nloptr",algorithm="NLOPT_GN_MLSL",
+            lb=c(alpha.1=0,alpha.2=-1,x1.0=-10,x2.0=0,tau=0),
+            ub=c(alpha.1=2,alpha.2=0,x1.0=0,x2.0=10,tau=5),
+            xtol_rel=1e-6,maxeval=1000,
+            local_opts=list(algorithm="NLOPT_LN_NELDERMEAD",
+                            xtol_rel=1e-3)) -> tm
> stopifnot(summary(tm)$convergence==5)
> traj.match(ou2,start=pp,est=c("alpha.1","alpha.2","x1.0","x2.0","tau"),
+            method="nloptr",algorithm="NLOPT_GN_MLSL",
+            lower=c(0,-1,-10,0,0),
+            upper=c(2,0,0,10,5),
+            xtol_rel=1e-6,maxeval=1000,
+            local_opts=list(algorithm="NLOPT_LN_NELDERMEAD",
+                            xtol_rel=1e-3)) -> tm
> stopifnot(summary(tm)$convergence==5)
> 
> pompExample(ricker)
newly created object(s):
 ricker 
> try(traj.match(ricker,start=numeric(0)))
Error : in 'minim': 'start' must be supplied
> try(traj.match(ricker,transform=TRUE,est=c("bob")))
Error : in 'minim': 'est' must refer to parameters named in 'partrans(object,start,dir="toEstimationScale")'
> 
