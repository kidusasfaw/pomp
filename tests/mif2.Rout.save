
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
Welcome to pomp version 1.19!
pomp version 2 is now available on https://kingaa.github.io/pomp/.
This new version contains many improvements but is not backward compatible.
To allow users time to modify their codes, 'pomp' version 2 will be provided as package 'pomp2' for a short while.

Around the middle of 2019, 'pomp2' will be renamed 'pomp' version 2.1 and will be released to CRAN. Until then, 'pomp' versions < 2 will continue to be available.

See the 'pomp version 2 upgrade guide' at https://kingaa.github.io/pomp/.
> 
> pompExample(ou2)
newly created object(s):
 ou2 
> 
> png(file="mif2-%02d.png",res=100)
> 
> set.seed(64857673L)
> options(digits=3)
> 
> guess2 <- guess1 <- coef(ou2)
> guess1[c('x1.0','x2.0','alpha.2','alpha.3')] <- 0.5*guess1[c('x1.0','x2.0','alpha.2','alpha.3')]
> guess2[c('x1.0','x2.0','alpha.2','alpha.3')] <- 1.5*guess1[c('x1.0','x2.0','alpha.2','alpha.3')]
> 
> try(mif2(ou2,Nmif=10,start=guess2,
+          cooling.type="hyperbolic",cooling.fraction.50=0.05,
+          rw.sd=rw.sd(
+              x1.0=ivp(0.5),x2.0=ivp(0.5),
+              alpha.2=0.1,alpha.3=0.1)) -> ignore)
Error in mif2.internal(object = object, Nmif = Nmif, start = start, Np = Np,  : 
  argument "Np" is missing, with no default
> try(mif2(ou2,Nmif=1,start=guess2,Np=rep(10,102),
+          cooling.type="hyperbolic",cooling.fraction.50=0.05,
+          rw.sd=rw.sd(
+              x1.0=ivp(0.5),x2.0=ivp(0.5),
+              alpha.2=0.1,alpha.3=0.1)) -> ignore)
Warning messages:
1: in 'mif2': Np[k] ignored for k > ntimes 
2: in 'mif2.pfilter': 23 filtering failures occurred. 
> try(mif2(ou2,Nmif=1,start=guess2,Np=seq_len(101),
+          cooling.type="hyperbolic",cooling.fraction.50=0.05,
+          rw.sd=rw.sd(
+              x1.0=ivp(0.5),x2.0=ivp(0.5),
+              alpha.2=0.1,alpha.3=0.1)) -> ignore)
Warning message:
in 'mif2': Np[k] ignored for k > ntimes 
> try(mif2(ou2,Nmif=0,start=guess2,Np=1000,
+          cooling.type="hyperbolic",cooling.fraction.50=0.05,
+          rw.sd=rw.sd(
+              x1.0=ivp(0.5),x2.0=ivp(0.5),
+              alpha.2=0.1,alpha.3=0.1)) -> ignore)
Error : in 'mif2': 'Nmif' must be a positive integer.
> try(mif2(ou2,Nmif=1,Np=1000,rw.sd=rw.sd(ivp(0.1))))
Error : in 'mif2': in 'rw.sd': parameters must be referenced by name.
> try(mif2(ou2,Nmif=1,Np=10,rw.sd=rw.sd(alpha.2=10),
+   cooling.fraction.50=1,max.fail=0))
Error : in 'mif2': in 'mif2.pfilter': too many filtering failures
> try(mif2(ou2,Nmif=1,Np=100,start=numeric(0)))
Error : in 'mif2': parameters must be specified as a named numeric vector.
> try(mif2(ou2,Nmif=1,Np=100,start=unname(coef(ou2))))
Error : in 'mif2': parameters must be specified as a named numeric vector.
> try(mif2(ou2,Nmif=1,Np="100"))
Error : in 'mif2': 'Np' must be a number, a vector of numbers, or a function
> try(mif2(ou2,Nmif=1,Np=10,cooling.fraction.50=1))
Error : in 'mif2': 'rw.sd' must be specified!
> try(mif2(ou2,Nmif=1,Np=10,rw.sd=rw.sd(alpha.2=10),
+   cooling.fraction.50=2,max.fail=0))
Error : in 'mif2': 'cooling.fraction.50' must be in (0,1]
> freeze(mif2(ou2,start=as.list(coef(ou2)),
+   Nmif=1,Np=10,rw.sd=rw.sd(alpha.2=10),
+   cooling.fraction.50=0.1),seed=5959696) -> m1
Warning messages:
1: in 'mif2.pfilter': filtering failure at last filter iteration, using unweighted mean for 'coef' 
2: in 'mif2.pfilter': 89 filtering failures occurred. 
> 
> m1 <- mif2(ou2,Nmif=50,start=guess1,Np=1000,
+            cooling.type="hyperbolic",cooling.fraction.50=0.05,
+            rw.sd=rw.sd(
+                x1.0=ivp(0.5),x2.0=ivp(0.5),
+                alpha.2=0.1,alpha.3=0.1))
> m2 <- mif2(ou2,Nmif=30,start=guess2,Np=1000,
+            cooling.type="hyperbolic",cooling.fraction.50=0.05,
+            rw.sd=rw.sd(
+                x1.0=ivp(0.5),x2.0=ivp(0.5),
+                alpha.2=0.1,alpha.3=0.1))
> m2 <- continue(m2,Nmif=20)
> 
> try(conv.rec(m2,c("bob","nancy")))
Error : in 'conv.rec': name(s) 'bob','nancy' correspond to no parameter(s) in 'conv.rec(object,transform=FALSE)'
> 
> freeze(mif2(m2,Nmif=2,.ndone=50,.paramMatrix=m2@paramMatrix),seed=595996) -> m2a
> freeze(continue(m2,Nmif=2),seed=595996) -> m2b
> stopifnot(all.equal(coef(m2a),coef(m2b)))
> 
> try(continue(m2,Nmif=10,rw.sd=rw.sd(beta=0.1,alpha.2=0.1)))
Error : in 'mif2': the following parameter(s), given random walks in 'rw.sd', are not present in 'start': 'beta'
> try(continue(m2,Nmif=10,rw.sd=rw.sd(alpha.2=rep(0.1,3))))
Error : in 'mif2': 'rw.sd' spec for parameter 'alpha.2' does not evaluate to a vector of the correct length (100).
> 
> plot(m1,y=NA)
Warning message:
in 'plot-mif2d.pomp': 'y' is ignored 
> dim(coef(c(m1)))
[1]  1 10
> plot(m12 <- c(m1,m2),y=33)
Warning message:
in 'plot-mif2d.pomp': 'y' is ignored 
> coef(c(m12))
     alpha.1 alpha.2 alpha.3 alpha.4 sigma.1 sigma.2 sigma.3 tau   x1.0  x2.0
[1,]     0.8  -0.542   0.275     0.9       3    -0.5       2   1 -0.599 0.788
[2,]     0.8  -0.474   0.350     0.9       3    -0.5       2   1 -2.676 2.431
> dim(coef(m12))
[1]  2 10
> dim(coef(c(m12,m12)))
[1]  4 10
> dim(coef(c(m12,m1)))
[1]  3 10
> dim(coef(c(m1,m12)))
[1]  3 10
> dim(coef(m12[2]))
[1]  1 10
> sapply(conv.rec(m12),dim)
     [,1] [,2]
[1,]   51   51
[2,]   12   12
> try(c(m1,ou2))
Error : in 'c': cannot mix 'mif2d.pomp' and non-'mif2d.pomp' objects
> try(c(c(m1,m2),ou2))
Error : in 'c': cannot mix 'mif2d.pomp' and non-'mif2d.pomp' objects
> 
> rbind(mle1=c(coef(m1),loglik=logLik(pfilter(m1,Np=1000))),
+       mle2=c(coef(m2),loglik=logLik(pfilter(m1,Np=1000))),
+       truth=c(coef(ou2),loglik=logLik(pfilter(m1,Np=1000))))
      alpha.1 alpha.2 alpha.3 alpha.4 sigma.1 sigma.2 sigma.3 tau   x1.0  x2.0
mle1      0.8  -0.542   0.275     0.9       3    -0.5       2   1 -0.599 0.788
mle2      0.8  -0.474   0.350     0.9       3    -0.5       2   1 -2.676 2.431
truth     0.8  -0.500   0.300     0.9       3    -0.5       2   1 -3.000 4.000
      loglik
mle1    -481
mle2    -481
truth   -481
> 
> m3 <- mif2(ou2,Nmif=3,start=guess1,Np=200,
+            cooling.fraction=0.2,
+            rw.sd=rw.sd(
+                x1.0=c(0.5,rep(0.2,99)),
+                x2.0=ivp(0.5),
+                alpha.2=ifelse(time==1,0.2,0.1),
+                alpha.3=0.2*(time<10)))
> 
> m4 <- mif2(ou2,Nmif=3,start=guess1,
+            Np=function(k)if(k<20) 200 else 100,
+            cooling.fraction=0.2,
+            rw.sd=rw.sd(
+                x1.0=c(0.5,rep(0.2,99)),
+                x2.0=ivp(0.5),
+                alpha.2=ifelse(time==1,0.2,0.1),
+                alpha.3=0.2*(time<10)))
> 
> m4 <- mif2(m4,Nmif=10,Np=c(rep(200,20),rep(100,80),200))
> m4 <- continue(m4,Nmif=10,cooling.fraction=0.1)
> try(continue(m4,Np=function(k)if(k<10) "B" else 500))
Error : in 'mif2': if 'Np' is a function, it must return a single positive integer
> try(continue(m4,Np=function(k)if(k<10) -30 else 500))
Error : in 'mif2': number of particles, 'Np', must be a positive integer.
> 
> pf <- pfilter(m4)
> half <- 0.5
> capture.output(
+     m4 <- mif2(pf,Nmif=10,
+                cooling.fraction=0.2,
+                verbose=TRUE,
+                rw.sd=rw.sd(
+                    x1.0=c(half,rep(0.2,99)),
+                    x2.0=ivp(half),
+                    alpha.2=ifelse(time==1,0.2,0.1),
+                    alpha.3=0.2*(time<10)))
+ ) -> out
> stopifnot(length(out)==210)
> stopifnot(sum(grepl("mif2 iteration",out))==10)
> stopifnot(sum(grepl("mif2 pfilter",out))==200)
> 
> m5 <- m4
> coef(m5,"alpha.2") <- -Inf
> try(mif2(m5,Np=100,Nmif=2))
Error : in 'mif2': in 'mif2.pfilter': 'dmeasure' returns non-finite value.
likelihood, data, states, and parameters are:
   time:            2
    lik:          NaN
     y1:      0.24217
     y2:      7.03942
     x1:          Inf
     x2:          NaN
alpha.1:          0.8
alpha.2:         -Inf
alpha.3:     0.342175
alpha.4:          0.9
sigma.1:            3
sigma.2:         -0.5
sigma.3:            2
    tau:            1
   x1.0:    -0.240228
   x2.0:     0.352502
> 
> library(ggplot2)
> library(reshape2)
> library(magrittr)
> 
> m4 %>% conv.rec() %>% melt() %>%
+     ggplot(aes(x=iteration,y=value,color=variable))+
+     geom_line()+
+     facet_wrap(~variable,scales='free_y',ncol=2)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> m4 %>% conv.rec(c("alpha.2","alpha.3","loglik")) %>% melt() %>%
+     ggplot(aes(x=iteration,y=value,color=variable))+
+     geom_line()+
+     facet_wrap(~variable,scales="free_y",ncol=1)
Warning message:
Removed 1 rows containing missing values (geom_path). 
> 
> pompExample(gompertz)
newly created object(s):
 gompertz 
> 
> coef(gompertz,"K") <- -1
> try(mif2(gompertz,Np=1000,rw.sd=rw.sd(K=0.1,r=0.1),cooling.fraction.50=0.5))
Error : in 'mif2': in 'mif2.pfilter': 'dmeasure' returns non-finite value.
likelihood, data, states, and parameters are:
 time:            1
  lik:          NaN
    Y:      1.11862
    X:          NaN
    K:    -0.952455
    r:     0.227348
sigma:          0.1
  tau:          0.1
  X.0:            1
> 
> pomp(gompertz,
+      toEstimationScale=function (params,...){
+          params["r"] <- log(params["r"])
+          params
+      },
+      fromEstimationScale=function (params,...){
+          params["r"] <- exp(params["r"])
+          params
+      }) -> po
> 
> try(mif2(po,Nmif=3,Np=1000,rw.sd=rw.sd(K=5,r=Inf),cooling.fraction.50=0.5))
Error : in 'mif2': in 'mif2.pfilter': 'dmeasure' returns non-finite value.
likelihood, data, states, and parameters are:
 time:            1
  lik:          NaN
    Y:      1.11862
    X:          NaN
    K:     -1.91576
    r:          NaN
sigma:          0.1
  tau:          0.1
  X.0:            1
> 
> coef(gompertz,"K") <- 10
> try(gb <- mif2(gompertz,Nmif=1,Np=1,rw.sd=c(K=0.1,r=0.1),
+                cooling.fraction.50=0.2,transform=TRUE))
Error : in 'mif2': 'rw.sd' should be specified using the 'rw.sd' function. See '?mif2'.
> 
> mif2(m4,Nmif=2,cooling.type="hyperbolic",cooling.fraction.50=1) -> m6
> 
> ep <- 0.1
> m5 <- mif2(ou2,Nmif=2,start=guess2,Np=1000,
+            cooling.type="hyperbolic",cooling.fraction.50=0.05,
+            rw.sd=rw.sd(x1.0=ivp(ep),x2.0=ivp(ep),alpha.2=ep,alpha.3=ep))
> stopifnot(is(m5,"mif2d.pomp"))
> 
> f <- function () {
+     ep <- 0.2
+     m <- mif2(ou2,Nmif=2,start=guess2,Np=1000,
+               cooling.type="hyperbolic",cooling.fraction.50=0.05,
+               rw.sd=rw.sd(x1.0=ivp(ep),alpha.2=ep))
+     as.numeric(m@rw.sd[,1:2])
+ }
> 
> stopifnot(all.equal(f(),c(0.2,0.2,0.0,0.2)))
> 
> rr <- rw.sd(x1.0=ivp(ep),alpha.2=ep)
> f <- function () {
+     m <- mif2(ou2,Nmif=2,start=guess2,Np=1000,
+               cooling.type="hyperbolic",cooling.fraction.50=0.05,
+               rw.sd=rr)
+     as.numeric(m@rw.sd[,1:2])
+ }
> 
> stopifnot(all.equal(f(),c(0.1,0.1,0.0,0.1)))
> 
> m7 <- m1
> coef(m7,"tau") <- 0
> m7 <- mif2(m7,Nmif=2)
Warning messages:
1: in 'mif2.pfilter': filtering failure at last filter iteration, using unweighted mean for 'coef' 
2: in 'mif2.pfilter': 100 filtering failures occurred. 
3: in 'mif2.pfilter': filtering failure at last filter iteration, using unweighted mean for 'coef' 
4: in 'mif2.pfilter': 100 filtering failures occurred. 
> m7 <- mif2(m7)
Warning messages:
1: in 'mif2.pfilter': filtering failure at last filter iteration, using unweighted mean for 'coef' 
2: in 'mif2.pfilter': 100 filtering failures occurred. 
3: in 'mif2.pfilter': filtering failure at last filter iteration, using unweighted mean for 'coef' 
4: in 'mif2.pfilter': 100 filtering failures occurred. 
> 
> dev.off()
null device 
          1 
> 
