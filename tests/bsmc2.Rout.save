
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
Welcome to pomp version 1.19!
pomp version 2 is now available on https://kingaa.github.io/pomp/.
This new version contains many improvements but is not backward compatible.
To allow users time to modify their codes, 'pomp' version 2 will be provided as package 'pomp2' for a short while.

Around the middle of 2019, 'pomp2' will be renamed 'pomp' version 2.1 and will be released to CRAN. Until then, 'pomp' versions < 2 will continue to be available.

See the 'pomp version 2 upgrade guide' at https://kingaa.github.io/pomp/.
> 
> options(digits=2)
> 
> png(filename="bsmc2-%02d.png",res=100)
> 
> set.seed(398585L)
> pompExample(ou2)
newly created object(s):
 ou2 
> 
> time(ou2) <- 1:10
> 
> Np <- 20000
> 
> try(bsmc2(ou2,Np=2,smooth=0.01,est=estnames,tol=1e-2,max.fail=100))
Error : in 'bsmc2': 'rprior' error: operation cannot be completed: rprior has not been specified
> 
> prior.bounds <- rbind(
+                       alpha.2=c(-0.55,-0.45),
+                       alpha.3=c(0.25,0.35)
+                       )
> colnames(prior.bounds) <- c("lower","upper")
> 
> estnames <- rownames(prior.bounds)
> 
> prior <- matrix(data=coef(ou2),nrow=length(coef(ou2)),ncol=Np)
> rownames(prior) <- names(coef(ou2))
> for (n in estnames) {
+   prior[n,] <- runif(n=Np,min=prior.bounds[n,1],max=prior.bounds[n,2])
+ }
> 
> garb <- ou2
> coef(garb) <- numeric(0)
> try(garb <- bsmc2(garb))
Error : in 'bsmc2': 'params' must be supplied
> 
> ##Run Liu & West particle filter
> bsmc2(ou2,params=prior,smooth=0.02,Np=100) -> smc
Warning message:
in 'bsmc2': 'Np' is ignored when 'params' is a matrix 
> smc <- bsmc2(ou2,est="alpha.2",params=prior,smooth=0.02)
> prior <- smc$prior
> post <- smc$post
> 
> try(bsmc2(ou2,params=prior,smooth=2))
Error : in 'bsmc2': 'smooth' must be a scalar in (0,1]
> try(bsmc2(pomp(ou2,rprior=function(params,...)numeric(0)),Np=2))
Error : in 'bsmc2': 'rprior' error: in 'rprior': user 'rprior' returns a vector of 0 parameters but 10 are expected
> try(bsmc2(pomp(ou2,rprior=function(params,...)numeric(10)),Np=2))
Error : in 'bsmc2': no parameters to estimate
> try({p2 <- prior; rownames(p2) <- NULL; bsmc2(ou2,params=p2)})
Error : in 'bsmc2': 'params' must have rownames
> 
> smc <- bsmc2(ou2,params=prior,smooth=0.02)
> prior <- smc$prior
> post <- smc$post
> 
> print(
+       cbind(
+             prior.mean=apply(prior,1,mean),
+             posterior.mean=apply(post,1,mean),
+             truth=coef(ou2),
+             t(apply(post,1,quantile,c(0.025,0.5,0.975)))
+             )
+       )
        prior.mean posterior.mean truth  2.5%   50%   98%
alpha.1        0.8            0.8   0.8  0.80  0.80  0.80
alpha.2       -0.5           -0.5  -0.5 -0.55 -0.51 -0.46
alpha.3        0.3            0.3   0.3  0.26  0.30  0.35
alpha.4        0.9            0.9   0.9  0.90  0.90  0.90
sigma.1        3.0            3.0   3.0  3.00  3.00  3.00
sigma.2       -0.5           -0.5  -0.5 -0.50 -0.50 -0.50
sigma.3        2.0            2.0   2.0  2.00  2.00  2.00
tau            1.0            1.0   1.0  1.00  1.00  1.00
x1.0          -3.0           -3.0  -3.0 -3.00 -3.00 -3.00
x2.0           4.0            4.0   4.0  4.00  4.00  4.00
> 
> print(min(smc$eff.sample.size))
[1] 1347
> print(smc$log.evidence)
[1] -44
> 
> ou2 <- pomp(ou2,rprior=function(params,...)params)
> smc <- bsmc2(ou2,Np=5000,smooth=0.1,est=estnames)
> print(smc$eff.sample.size)
 [1] 1192  793  606  670 1123  366  985  332 1045  788
> print(smc$log.evidence)
[1] -44
> 
> pompExample(ricker)
newly created object(s):
 ricker 
> 
> set.seed(6457673L)
> 
> po <- pomp(
+            ricker,
+            rprior=function (params, ...) {
+              params["r"] <- exp(runif(n=1,min=2,max=5))
+              params["sigma"] <- runif(n=1,min=0.1,max=1)
+              params
+            }
+            )
> 
> Np <- 10000
> 
> fit <- bsmc2(po,Np=100,est=c("r","sigma"),transform=TRUE,smooth=0.2)
> invisible(apply(fit$prior[c("r","sigma"),],1,mean))
> invisible(apply(fit$post[c("r","sigma"),],1,mean))
> invisible(coef(fit))
> plot(fit,thin=300)
> 
> smc <- bsmc2(ou2,transform=TRUE,Np=2,smooth=0.01,est=estnames,
+              tol=1e-2,max.fail=100,params=as.list(coef(ou2)))
Warning message:
in 'bsmc2': 7 filtering failures occurred. 
> 
> try(bsmc2(pomp(po,dmeasure=function(y,x,t,params,log,...) stop("oof!")),
+           Np=100,est=c("r","sigma"),transform=TRUE,smooth=0.2))
Error : in 'bsmc2': 'dmeasure' error: oof!
> 
> try(bsmc2(po,Np=100,est=c("r","bob"),transform=TRUE,smooth=0.2))
Error : in 'bsmc2': parameter(s) 'bob' not found.
> 
> dev.off()
null device 
          1 
> 
