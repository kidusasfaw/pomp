
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
Welcome to pomp version 1.19!
pomp version 2 is now available on https://kingaa.github.io/pomp/.
This new version contains many improvements but is not backward compatible.
To allow users time to modify their codes, 'pomp' version 2 will be provided as package 'pomp2' for a short while.

Around the middle of 2019, 'pomp2' will be renamed 'pomp' version 2.1 and will be released to CRAN. Until then, 'pomp' versions < 2 will continue to be available.

See the 'pomp version 2 upgrade guide' at https://kingaa.github.io/pomp/.
> 
> set.seed(45768683)
> 
> rw.rprocess <- function (x, t, params, delta.t, ...) {
+   ## this function simulates two independent random walks with intensities s1, s2
+   noise.sds <- params[c('s1','s2')]
+   rnorm(n=2,mean=x,sd=noise.sds*sqrt(delta.t))
+ }
> 
> rw.dprocess <- function (x1, x2, t1, t2, params, ...) {
+   ## given consecutive states in 'x', this function computes the log p.d.f.
+   dt <- t2-t1
+   noise.sds <- params[c('s1','s2')]
+   sum(dnorm(x=x2,mean=x1,sd=noise.sds*sqrt(dt),log=TRUE))
+ }
> 
> bvnorm.rmeasure <- function (t, x, params, ...) {
+   ## noisy observations of the two walks with common noise SD 'tau'
+   c(
+     y1=rnorm(n=1,mean=x['x1'],sd=params['tau']),
+     y2=rnorm(n=1,mean=x['x2'],sd=params['tau'])
+   )
+ }
> 
> bvnorm.dmeasure <- function (y, x, t, params, log = FALSE, ...) {
+   f <- sum(
+     dnorm(
+       x=y[c("y1","y2")],
+       mean=x[c("x1","x2")],
+       sd=params["tau"],
+       log=TRUE
+     ),
+     na.rm=TRUE
+   )
+   if (log) f else exp(f)
+ }
> 
> bad.initializer <- function (params, t0, ...)
+ {
+   ivpnames <- c("x1.0","x2.0")
+   x <- params[ivpnames]
+   x
+ }
> 
> crap.initializer <- function (params, t0, ...)
+ {
+   x <- rnorm(n=ceiling(runif(n=1,min=0,max=10)))
+   names(x) <-head(letters,length(x))
+   x
+ }
> 
> p <- rbind(s1=c(2,2,3),s2=c(0.1,1,2),tau=c(1,5,0),x1.0=c(0,0,5),x2.0=c(0,0,0))
> 
> rw2 <- pomp(
+   rprocess = onestep.sim(rw.rprocess),
+   dprocess = rw.dprocess,
+   measurement.model=list(
+     y1 ~ norm(mean=x1,sd=tau),
+     y2 ~ norm(mean=x2,sd=tau)
+   ),
+   initializer=bad.initializer,
+   data=data.frame(
+     t=1:100,
+     y1=rep(0,100),
+     y2=rep(0,100)
+   ),
+   times=1,
+   t0=0,
+   useless=23
+ )
in 'pomp': the following unrecognized argument(s) will be stored for use by user-defined functions: 'useless'
> 
> rw2 <- pomp(
+   rprocess = onestep.sim(rw.rprocess),
+   dprocess = rw.dprocess,
+   measurement.model=list(
+     y1 ~ norm(mean=x1,sd=tau),
+     y2 ~ norm(mean=x2,sd=tau)
+   ),
+   initializer=bad.initializer,
+   times="time",
+   data=data.frame(
+     y1=rep(0,100),
+     y2=rep(0,100),
+     time=1:100
+   ),
+   t0=0,
+   useless=23
+ )
in 'pomp': the following unrecognized argument(s) will be stored for use by user-defined functions: 'useless'
> 
> show(rw2)
<object of class 'pomp'>
> 
> try(simulate(rw2,params=p))
Error : in 'simulate': in 'init.state': a state variable and a parameter share a single name: 'x1.0'
> 
> rw2 <- pomp(rw2,initializer=crap.initializer)
> 
> try(simulate(rw2,params=p))
Error : in 'simulate': in 'init.state': user initializer returns vectors of non-uniform length
> 
> rw2 <- pomp(
+   rprocess = onestep.sim(rw.rprocess),
+   dprocess = rw.dprocess,
+   measurement.model=list(
+     y1 ~ norm(mean=x1,sd=tau),
+     y2 ~ norm(mean=x2,sd=tau)
+   ),
+   rmeasure=Csnippet("sid"),
+   dmeasure=Csnippet("nancy"),
+   times="time",
+   data=data.frame(
+     y1=rep(0,100),
+     y2=rep(0,100),
+     time=1:100
+   ),
+   t0=0
+ )
Warning message:
in 'pomp': specifying 'measurement.model' overrides specification of 'rmeasure' and 'dmeasure'. 
> 
> rw2 <- simulate(rw2,params=p)[[1]]
> x <- states(rw2)
> y <- obs(rw2)
> d1 <- dprocess(rw2,x=x,times=time(rw2),params=p)
> m1 <- dmeasure(rw2,x=x,times=time(rw2),params=p,y=y)
> 
> rw2 <- pomp(rw2,
+   dmeasure=Csnippet("
+     lik=dnorm(y1,x1,tau,1)+dnorm(y2,x2,tau,1);
+     lik = (give_log) ? lik : exp(lik);"),
+   dprocess = Csnippet("
+     double sdt = sqrt(t_2-t_1);
+     loglik = dnorm(x1_2,x1_1,s1*sdt,1)+dnorm(x2_2,x2_1,s2*sdt,1);"),
+   statenames=c("x1","x2"),
+   paramnames=c("s1","s2","tau")
+ )
> d2 <- dprocess(rw2,x=x,times=time(rw2),params=p)
> m2 <- dmeasure(rw2,x=x,times=time(rw2),params=p,y=y)
> stopifnot(all.equal(d1,d2))
> stopifnot(all.equal(m1,m2))
> 
> y <- simulate(rw2,params=p,obs=T,states=T)
Warning message:
the 'states' and 'obs' arguments of 'simulate' are deprecated and will be removed in a future release. 
> y <- simulate(rw2,params=p,obs=T)
Warning message:
the 'states' and 'obs' arguments of 'simulate' are deprecated and will be removed in a future release. 
> x <- simulate(rw2,params=p,states=T)
Warning message:
the 'states' and 'obs' arguments of 'simulate' are deprecated and will be removed in a future release. 
> x <- simulate(rw2,nsim=10,params=p,states=T)
Warning message:
the 'states' and 'obs' arguments of 'simulate' are deprecated and will be removed in a future release. 
> x <- simulate(rw2,nsim=10,params=p[,1],states=T)
Warning message:
the 'states' and 'obs' arguments of 'simulate' are deprecated and will be removed in a future release. 
> x <- simulate(rw2,nsim=10,params=p[,1],obs=T,states=T)
Warning message:
the 'states' and 'obs' arguments of 'simulate' are deprecated and will be removed in a future release. 
> x <- simulate(rw2,nsim=10,params=p[,1],obs=T,states=T)
Warning message:
the 'states' and 'obs' arguments of 'simulate' are deprecated and will be removed in a future release. 
> x <- simulate(rw2,nsim=10,params=p,obs=T,states=T)
Warning message:
the 'states' and 'obs' arguments of 'simulate' are deprecated and will be removed in a future release. 
> x <- simulate(rw2,nsim=10,params=p[,1])
> 
> x <- obs(rw2)
> t <- time(rw2)
> 
> x0 <- init.state(rw2,params=p)
> x <- rprocess(rw2,xstart=x0,times=0:100,params=p)
> y <- rmeasure(rw2,x=x,times=0:100,params=p)
> 
> a1 <- dmeasure(rw2,y=y[,1,1:4],x=x[,,1:4,drop=F],times=time(rw2)[1:4],p)
> b1 <- dmeasure(rw2,y=y[,2,1:4],x=x[,,1:4,drop=F],times=time(rw2)[1:4],p)
> c1 <- log(dmeasure(rw2,y=y[,3,1:4],x=x[,,1:4,drop=F],times=time(rw2)[1:4],p))
> d1 <- dmeasure(rw2,y=y[,3,1:4],x=x[,,1:4,drop=F],times=time(rw2)[1:4],p,log=T)
> e1 <- dprocess(rw2,x[,,6:11],times=5:10,params=p,log=T)
> f1 <- log(dprocess(rw2,x[,,6:11],times=5:10,params=p))
> stopifnot(max(abs(c1-d1),na.rm=T)<.Machine$double.eps*100)
> stopifnot(max(abs(e1-f1),na.rm=T)<.Machine$double.eps*100)
> 
> po <- pomp(
+   rw2,
+   dmeasure = bvnorm.dmeasure,
+   rmeasure = bvnorm.rmeasure
+ )
> 
> a2 <- dmeasure(po,y=y[,1,1:4],x=x[,,1:4,drop=F],times=time(rw2)[1:4],p)
> b2 <- dmeasure(po,y=y[,2,1:4],x=x[,,1:4,drop=F],times=time(rw2)[1:4],p)
> c2 <- log(dmeasure(po,y=y[,3,1:4],x=x[,,1:4,drop=F],times=time(rw2)[1:4],p))
> d2 <- dmeasure(po,y=y[,3,1:4],x=x[,,1:4,drop=F],times=time(rw2)[1:4],p,log=T)
> e2 <- dprocess(po,x[,,6:11],times=5:10,params=p,log=T)
> f2 <- log(dprocess(rw2,x[,,6:11],times=5:10,params=p))
> stopifnot(max(abs(c2-d2),na.rm=T)<.Machine$double.eps*100)
> stopifnot(max(abs(e2-f2),na.rm=T)<.Machine$double.eps*100)
> 
> stopifnot(max(abs(a1-a2),na.rm=T)<.Machine$double.eps*100)
> stopifnot(max(abs(b1-b2),na.rm=T)<.Machine$double.eps*100)
> stopifnot(max(abs(d1-d2),na.rm=T)<.Machine$double.eps*100)
> stopifnot(max(abs(e1-e2),na.rm=T)<.Machine$double.eps*100)
> 
> pompExample(rw2)
newly created object(s):
 rw2 
> 
> a3 <- dmeasure(po,y=y[,1,1:4],x=x[,,1:4,drop=F],times=time(rw2)[1:4],p)
> b3 <- dmeasure(po,y=y[,2,1:4],x=x[,,1:4,drop=F],times=time(rw2)[1:4],p)
> c3 <- log(dmeasure(po,y=y[,3,1:4],x=x[,,1:4,drop=F],times=time(rw2)[1:4],p))
> d3 <- dmeasure(po,y=y[,3,1:4],x=x[,,1:4,drop=F],times=time(rw2)[1:4],p,log=T)
> e3 <- dprocess(po,x[,,6:11],times=5:10,params=p,log=T)
> f3 <- log(dprocess(rw2,x[,,6:11],times=5:10,params=p))
> stopifnot(max(abs(c3-d3),na.rm=T)<.Machine$double.eps*100)
> stopifnot(max(abs(e3-f3),na.rm=T)<.Machine$double.eps*100)
> 
> stopifnot(max(abs(a2-a3),na.rm=T)<.Machine$double.eps*100)
> stopifnot(max(abs(b2-b3),na.rm=T)<.Machine$double.eps*100)
> stopifnot(max(abs(d2-d3),na.rm=t)<.Machine$double.eps*100)
> stopifnot(max(abs(e2-e3),na.rm=t)<.Machine$double.eps*100)
> 
> new <- window(rw2,start=20,end=30)
> new <- simulate(new)
> 
> invisible(timezero(new))
> timezero(new) <- 19
> print(simulate(new))
<object of class 'pomp'>
> 
> time(rw2) <- seq(1,1000,by=20)
> x <- simulate(rw2)
> invisible(states(x)[,1:5])
> try(time(rw2) <- seq(-20,1000,by=20))
Error : in 'time<-': the zero-time 't0' must occur no later than the first observation
> try(time(rw2) <- c(0,5,10,15,12,20))
Error : in 'time<-': the times specified must be an increasing sequence
> time(rw2,t0=TRUE) <- seq(-20,1000,by=20)
> x <- simulate(rw2)
> time(pomp(rw2,times=4:6))
[1] 4 5 6
> time(rw2) <- c(0,20,25.8,50,60)
> time(rw2,t0=TRUE) <- c(0,20,25.8,50,60)
> time(rw2,t0=TRUE) <- c(0,0,20,25.8,50,60)
> time(rw2) <- c(0,20,25.8,50,60)
> 
> try(rw2 <- pomp(rprocess = "onestep.sim(rw.rprocess)",
+   data=data.frame(t=1:100,y1=rep(0,100),y2=rep(0,100)),times=1,t0=0))
Error : in 'pomp': 'rprocess' must be specified using one of the plugins:
'onestep.sim', 'discrete.time.sim', 'euler.sim', 'gillespie.sim', or 'gillespie.hl.sim'.
> try(rw2 <- pomp(rprocess = NULL,
+   data=data.frame(t=1:100,y1=rep(0,100),y2=rep(0,100)),times=1,t0=0,
+   obsnames=c("y1","y2","y2")))
Error : in 'pomp': all 'obsnames' must be unique
> 
