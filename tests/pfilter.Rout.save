
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
Welcome to pomp version 1.19!
pomp version 2 is now available on https://kingaa.github.io/pomp/.
This new version contains many improvements but is not backward compatible.
To allow users time to modify their codes, 'pomp' version 2 will be provided as package 'pomp2' for a short while.

Around the middle of 2019, 'pomp2' will be renamed 'pomp' version 2.1 and will be released to CRAN. Until then, 'pomp' versions < 2 will continue to be available.

See the 'pomp version 2 upgrade guide' at https://kingaa.github.io/pomp/.
> 
> pompExample(ou2)
newly created object(s):
 ou2 
> 
> set.seed(9994847L)
> 
> png(filename="pfilter-%02d.png",res=100)
> 
> pf <- pfilter(ou2,Np=1000)
> print(coef(ou2,c('x1.0','x2.0','alpha.1','alpha.4')),digits=4)
   x1.0    x2.0 alpha.1 alpha.4 
   -3.0     4.0     0.8     0.9 
> cat("particle filter log likelihood at truth\n")
particle filter log likelihood at truth
> print(pf$loglik,digits=4)
[1] -478.2
> 
> try(pfilter(ou2,Np=1000,params=c()))
Error : in 'pfilter': 'params' must be specified
> 
> try(pfilter(ou2,Np=c(1000,10)))
Error : in 'pfilter': 'Np' must have length 1 or length 101
> try(pfilter(ou2,Np=-100))
Error : in 'pfilter': number of particles, 'Np', must always be positive
> try(pfilter(ou2,Np="bob"))
Error : in 'pfilter': 'Np' must be a number, a vector of numbers, or a function
> try(pfilter(ou2,Np=100,params=matrix(0,nrow=3,ncol=100)))
Error : in 'pfilter': 'params' must have rownames
> try(pfilter(ou2,Np=1,max.fail=0))
Error : in 'pfilter': too many filtering failures
> try(replicate(n=10,pfilter(ou2,Np=function(k)if(k<10) c(100,200) else 500)))
Error : in 'pfilter': if 'Np' is a function, it must return a single positive integer
> pf <- replicate(n=10,pfilter(ou2,Np=function(k)if(k<10) 10000 else 500))
> pf.ll <- sapply(pf,logLik)
> ll.est <- log(mean(exp(pf.ll-mean(pf.ll))))+mean(pf.ll)
> ll.se <- sd(exp(pf.ll-mean(pf.ll)))/exp(ll.est-mean(pf.ll))/sqrt(length(pf))
> print(round(c(loglik=ll.est,loglik.se=ll.se),digits=2))
   loglik loglik.se 
  -480.50      0.39 
> 
> pompExample(euler.sir)
newly created object(s):
 euler.sir 
> pf <- pfilter(euler.sir,Np=100)
> print(coef(pf))
   gamma       mu     iota    beta1    beta2    beta3  beta.sd      pop 
2.60e+01 2.00e-02 1.00e-02 4.00e+02 4.80e+02 3.20e+02 1.00e-03 2.10e+06 
     rho      S_0      I_0      R_0 
6.00e-01 6.50e-02 1.00e-03 9.35e-01 
> print(pf$loglik,digits=4)
[1] -941
> 
> coef(pf,"rho") <- -1
> try(pfilter(pf))
Error : in 'pfilter': 'dmeasure' returns non-finite value.
likelihood, data, states, and parameters are:
   time:    0.0192308
    lik:          NaN
reports:          617
      S:       136019
      I:         2127
      R:  1.96184e+06
  cases:         1050
      W:    0.0783467
  gamma:           26
     mu:         0.02
   iota:         0.01
  beta1:          400
  beta2:          480
  beta3:          320
beta.sd:        0.001
    pop:      2.1e+06
    rho:           -1
    S_0:        0.065
    I_0:        0.001
    R_0:        0.935
> 
> p <- coef(euler.sir)
> euler.sir@params <- numeric(0)
> p["iota"] <- 1
> pf <- pfilter(euler.sir,params=p,Np=100,filter.mean=TRUE)
> print(coef(pf))
   gamma       mu     iota    beta1    beta2    beta3  beta.sd      pop 
2.60e+01 2.00e-02 1.00e+00 4.00e+02 4.80e+02 3.20e+02 1.00e-03 2.10e+06 
     rho      S_0      I_0      R_0 
6.00e-01 6.50e-02 1.00e-03 9.35e-01 
> print(logLik(pf),digits=4)
[1] -940.2
> plot(cond.loglik~time,data=as(pf,"data.frame"),type='l')
> plot(ess~time,data=as.data.frame(pf),type='l')
> plot(filter.mean.I~time,data=as(pf,"data.frame"),type='l')
> 
> pompExample(gompertz)
newly created object(s):
 gompertz 
> pfilter(gompertz,params=parmat(coef(gompertz),100)) -> pf
> pfilter(gompertz,params=parmat(coef(gompertz),100),Np=100) -> pf
> names(as.data.frame(pfilter(gompertz,Np=100,pred.mean=TRUE,pred.var=TRUE)))
[1] "time"        "Y"           "ess"         "cond.loglik" "X"          
[6] "X"          
> pfilter(gompertz,params=as.list(coef(gompertz)),Np=100) -> pf
> try(pfilter(gompertz) -> pf)
Error : in 'pfilter': 'Np' must be specified
> try(pfilter(gompertz,params=parmat(coef(gompertz),100),Np=1000) -> pf)
Error : in 'pfilter': when 'params' is provided as a matrix, do not specify 'Np'!
> coef(gompertz,"sigma") <- Inf
> try(pfilter(gompertz,Np=1000,pred.var=TRUE))
Error : in 'pfilter': non-finite state variable(s): X
> 
> dev.off()
null device 
          1 
> 
