
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
Welcome to pomp version 1.19!
pomp version 2 is now available on https://kingaa.github.io/pomp/.
This new version contains many improvements but is not backward compatible.
To allow users time to modify their codes, 'pomp' version 2 will be provided as package 'pomp2' for a short while.

Around the middle of 2019, 'pomp2' will be renamed 'pomp' version 2.1 and will be released to CRAN. Until then, 'pomp' versions < 2 will continue to be available.

See the 'pomp version 2 upgrade guide' at https://kingaa.github.io/pomp/.
> set.seed(1066L)
> options(digits=3)
> 
> png(filename="probe-%02d.png",res=100)
> 
> pompExample(ou2)
newly created object(s):
 ou2 
> 
> pm.ou2 <- probe(
+     ou2,
+     probes=list(
+         y1.mean=probe.mean(var="y1"),
+         y2.mean=probe.mean(var="y2"),
+         y1.sd=probe.sd(var="y1"),
+         y2.sd=probe.sd(var="y2")
+     ),
+     nsim=200
+ )
> 
> pm.po <- probe(
+     ou2,
+     params=c(
+         alpha.1=0.1,alpha.2=-0.5,alpha.3=0.3,alpha.4=0.2,
+         sigma.1=3,sigma.2=-0.5,sigma.3=2,
+         tau=1,
+         x1.0=0,x2.0=0
+     ),
+     probes=list(
+         y1.mean=probe.mean(var="y1"),
+         y2.mean=probe.mean(var="y2"),
+         y1.sd=probe.sd(var="y1"),
+         y2.sd=probe.sd(var="y2")
+     ),
+     nsim=200
+ )
> 
> invisible(summary(pm.ou2))
> invisible(summary(pm.po))
> 
> pm.ou2 <- probe(
+     ou2,
+     probes=list(
+         y1acf=probe.acf(var="y1",lags=c(0,1,2),type="corr"),
+         y2acf=probe.acf(var=c("y2"),lags=c(0,1,2)),
+         y12ccf=probe.ccf(var=c("y2","y1"),lags=c(3,8))
+     ),
+     nsim=200
+ )
Warning message:
in 'probe.acf': useless zero lag discarded in 'probe.acf' 
> 
> pb <- probe(
+     ou2,
+     probes=list(
+         y1=probe.quantile(var="y1",prob=seq(0.1,0.9,by=0.1)),
+         probe.acf(var=c("y1","y2"),lags=c(0,1,4,7),transform=identity),
+         pd=probe.period(var="y1",kernel.width=3)
+     ),
+     nsim=200
+ )
> 
> po <- ou2
> coef(po,c("alpha.2","alpha.3")) <- c(0,0)
> coef(po,c("sigma.2","sigma.1","sigma.3")) <- c(0,0.0,0.0)
> coef(po,c("tau")) <- c(0.0)
> po <- simulate(po)
> pb <- probe(
+     po,
+     probes=list(
+         probe.acf(var=c("y1","y2"),lags=c(0,1),type="cor"),
+         probe.nlar("y1",lags=1,powers=1),
+         probe.nlar("y2",lags=1,powers=1)
+     ),
+     nsim=300,
+     seed=1066L
+ )
Warning message:
in 'probe.acf': useless zero lag discarded in 'probe.acf' 
> x <- as.data.frame(po)
> mx <- sapply(x,mean)
> x <- sweep(x,2,mx)
> y1 <- head(x$y1,-1)
> z1 <- tail(x$y1,-1)
> y2 <- head(x$y2,-1)
> z2 <- tail(x$y2,-1)
> small.diff <- pb$datvals-c(mean(y1*z1)/mean(x$y1^2),mean(y2*z2)/mean(x$y2^2),mean(y1*z1)/mean(y1*y1),mean(y2*z2)/mean(y2*y2))
> stopifnot(max(abs(small.diff))<.Machine$double.eps*100)
> 
> po <- simulate(ou2)
> pb <- probe(
+     po,
+     probes=list(
+         probe.acf(var=c("y1"),lags=c(0,1,2),type="cov"),
+         probe.ccf(vars=c("y1","y1"),lags=c(0,1,2),type="cov")
+     ),
+     nsim=200,
+     seed=1066L
+ )
> 
> pb <- probe(
+     po,
+     probes=probe.ccf(vars=c("y1","y2"),lags=c(-5,-3,1,4,8)),
+     nsim=200,
+     seed=1066L
+ )
> 
> pb <- probe(
+     po,
+     probes=probe.ccf(vars=c("y1","y2"),lags=c(-5,-3,1,4,8),type="corr"),
+     nsim=200,
+     seed=1066L
+ )
> 
> head(as(pb,"data.frame"))
      ccf.-5 ccf.-3  ccf.1  ccf.4  ccf.8
data   0.570  0.714 -0.289 -0.692 0.1233
sim.1  0.664  0.857 -0.334 -0.831 0.1057
sim.2  0.645  0.699 -0.383 -0.741 0.1169
sim.3  0.387  0.582 -0.477 -0.616 0.0787
sim.4  0.697  0.852 -0.401 -0.817 0.3101
sim.5  0.371  0.622 -0.276 -0.551 0.0199
> head(as.data.frame(pb))
      ccf.-5 ccf.-3  ccf.1  ccf.4  ccf.8
data   0.570  0.714 -0.289 -0.692 0.1233
sim.1  0.664  0.857 -0.334 -0.831 0.1057
sim.2  0.645  0.699 -0.383 -0.741 0.1169
sim.3  0.387  0.582 -0.477 -0.616 0.0787
sim.4  0.697  0.852 -0.401 -0.817 0.3101
sim.5  0.371  0.622 -0.276 -0.551 0.0199
> 
> pompExample(ou2)
newly created object(s):
 ou2 
> 
> good <- probe(
+     ou2,
+     probes=list(
+         y1.mean=probe.mean(var="y1"),
+         y2.mean=probe.mean(var="y2"),
+         y1.sd=probe.sd(var="y1"),
+         y2.sd=probe.sd(var="y2"),
+         extra=function(x)max(x["y1",])
+     ),
+     nsim=500
+ )
> 
> ofun <- probe.match.objfun(good)
> ofun(coef(good))
[1] 6.34
> 
> ofun <- probe.match.objfun(ou2,est=c("alpha.1","alpha.2"),
+                            params=as.list(coef(ou2)),
+                            probes=good$probes,nsim=100,
+                            seed=349956868L
+                            )
> try(probe.match.objfun(ou2))
Error : in 'probe.match.objfun': 'nsim' must be specified
> try(probe.match.objfun(ou2,nsim=100))
Error : in 'probe.match.objfun': 'probes' must be supplied
> 
> library(nloptr)
> fit1 <- nloptr(
+     coef(good,c("alpha.1","alpha.2")),
+     ofun,
+     opts=list(
+         algorithm="NLOPT_LN_SBPLX",
+         xtol_rel=1e-10,
+         maxeval=1000
+     )
+ )
> fit2 <- probe.match(
+     good,
+     est=c("alpha.1","alpha.2"),
+     nsim=100,
+     algorithm="NLOPT_LN_SBPLX",
+     xtol_rel=1e-10,
+     maxeval=1000,
+     seed=349956868L
+ )
> 
> all.equal(fit1$solution,unname(coef(fit2,fit2$est)))
[1] TRUE
> 
> pompExample(ricker)
newly created object(s):
 ricker 
> 
> set.seed(6457673L)
> z <- as.numeric(obs(ricker))
> 
> po <- ricker
> 
> pb <- probe(
+     po,
+     probes=probe.median("y"),
+     nsim=200,
+     seed=838775L
+ )
> invisible(summary(pb))
> 
> pb <- probe(
+     po,
+     probes=probe.nlar("y",lags=c(1,2,3),powers=c(1,1,1),transform="sqrt"),
+     nsim=200,
+     seed=838775L
+ )
> invisible(summary(pb))
> 
> pb <- probe(
+     po,
+     probes=probe.nlar("y",lags=c(1,2,3),powers=1,transform="sqrt"),
+     nsim=200,
+     seed=838775L
+ )
> invisible(summary(pb))
> 
> pb <- probe(
+     po,
+     probes=probe.nlar("y",lags=1,powers=c(1,2,3),transform="sqrt"),
+     nsim=200,
+     seed=838775L
+ )
> plot(pb,y=NA)
Warning message:
in 'plot-probed.pomp': 'y' is ignored 
> invisible(summary(pb))
> 
> pb <- probe(
+     po,
+     probes=probe.marginal(
+         var="y",
+         transform=sqrt,
+         ref=z,
+         diff=1,
+         order=3
+     ),
+     nsim=200,
+     seed=838775L
+ )
> invisible(pb$datvals)
> invisible(summary(pb))
> 
> pb <- probe(
+     po,
+     probes=list(
+         probe.marginal(
+             var="y",
+             transform=sqrt,
+             ref=z,
+             diff=1,
+             order=3
+         ),
+         probe.acf(
+             var="y",
+             lags=c(0,1,3,5)
+         ),
+         mean=probe.mean(var="y",transform=sqrt)
+     ),
+     nsim=200,
+     seed=838775L
+ )
> invisible(pb$datvals)
> invisible(summary(pb))
> 
> print(pb@seed)
[1] 838775
> pbm <- probe.match(pb,est=c("r","sigma","phi"),
+                    start=as.list(coef(pb)),
+                    method="nloptr",transform=TRUE,
+                    algorithm="NLOPT_LN_SBPLX",
+                    xtol_rel=1e-5)
> dim(values(pbm))
[1] 201   9
> plot(pbm)
> invisible(summary(pbm))
> 
> coef(po) <- c(r=10,sigma=0.3,c=1,phi=20,N_0=5,e.0=0)
> 
> try(probe.match(po,params=numeric(3),nsim=20))
Error : in 'probe.match': 'probes' must be supplied
> try(probe.match.objfun(po,params=numeric(3),nsim=20))
Error : in 'probe.match.objfun': 'params' must be a named numeric vector
> try(probe.match.objfun(po,probes=probe.var("y"),est="bob",nsim=20))
Error : in 'probe.match.objfun': parameter(s): 'bob' not found in 'params'
> try(probe.match.objfun(po,probes="nancy",nsim=20))
Error : in 'probe.match.objfun': 'probes' must be a function or a list of functions
> try(probe.match.objfun(po,probes=function(x,y)x,nsim=20))
Error : in 'probe.match.objfun': each probe must be a function of a single argument
> 
> pb <- probe(
+     po,
+     probes=probe.marginal(
+         var="y",
+         transform=sqrt,
+         ref=z,
+         diff=1,
+         order=3
+     ),
+     nsim=200,
+     seed=838775L
+ )
> invisible(pb$datvals)
> invisible(summary(pb))
> 
> pm <- probe.match(
+     pb,
+     est=c("r","phi","N_0"),
+     transform=TRUE,
+     parscale=c(0.1,0.1,0.1),
+     nsim=200,
+     seed=838775L,
+     method="Nelder-Mead",
+     reltol=1e-7,
+     fail.value=1e9
+ )
> 
> invisible(cbind(truth=coef(ricker),est=coef(pm),guess=coef(po)))
> 
> probe.match(pm) -> pm
> 
> pb <- probe(
+     po,
+     probes=probe.nlar(
+         var="y",
+         transform=sqrt,
+         lags=1,
+         powers=c(1,2,3)
+     ),
+     nsim=300,
+     seed=838775L
+ )
> invisible(pb$datvals)
> invisible(summary(pb))
> 
> pm <- probe.match(
+     pb,
+     est=c("r","phi","N_0"),
+     transform=TRUE,
+     parscale=c(0.1,0.1,0.1),
+     nsim=333,
+     seed=838775L,
+     method="Nelder-Mead",
+     reltol=1e-7,
+     fail.value=1e9
+ )
> plot(pm)
> invisible(as(pm,"pomp"))
> pm <- probe.match(pm,seed=613980375L)
> invisible(simulate(pm,states=TRUE,obs=TRUE))
Warning message:
the 'states' and 'obs' arguments of 'simulate' are deprecated and will be removed in a future release. 
> 
> invisible(cbind(truth=coef(ricker),est=coef(pm),guess=coef(po)))
> 
> pb <- probe(
+     po,
+     probes=probe.marginal(
+         var="y",
+         transform=sqrt,
+         ref=runif(length(time(ricker))),
+         diff=2,
+         order=3
+     ),
+     nsim=257,
+     seed=838775L
+ )
> invisible(pb$datvals)
> invisible(summary(pb))
> 
> pb <- probe(
+     ricker,
+     probes=probe.acf(
+         var="y",
+         transform=sqrt,
+         lags=seq.int(from=0,to=5),
+         type="cov"
+     ),
+     nsim=200,
+     seed=838775L
+ )
> invisible(pb$datvals)
> invisible(summary(pb))
> 
> pb <- probe(
+     ricker,
+     probes=probe.acf(
+         var="y",
+         transform=sqrt,
+         lags=seq.int(from=1,to=5),
+         type="cor"
+     ),
+     nsim=200,
+     seed=838775L
+ )
> invisible(pb$datvals)
> invisible(summary(pb))
> dim(values(pb))
[1] 201   6
> 
> pb <- probe(
+     ricker,
+     probes=list(
+         v=probe.var("y",transform=sqrt),
+         probe.acf(
+             var="y",
+             transform=sqrt,
+             lags=c(0,1,2),
+             type="cov"
+         ),
+         probe.nlar(
+             var="y",
+             transform=sqrt,
+             lags=c(1,2),
+             powers=1
+         )
+     ),
+     nsim=200,
+     seed=838775L
+ )
> invisible(pb$datvals)
> invisible(summary(pb))
> 
> probe(pb) -> pb
> try(probe(pb,params=as.list(coef(pb))) -> pb)
> 
> try(
+     probe(
+         ricker,
+         probes=list(
+             mn=probe.mean("y",transform=sqrt,trim=0.1),
+             md=probe.median("y",na.rm=FALSE),
+             wacko=function(y)y[sample.int(n=length(y),size=sample.int(n=3,size=1))]
+         ),
+         nsim=100,
+         seed=838775L
+     )
+ )
Error : in 'probe': applying probes to simulated data: variable-sized results returned by probe 3
> 
> try(probe(ricker,probes=list(probe.mean(c("y","z"))),nsim=100))
Error : 'probe.mean' is a univariate probe
> try(probe(ricker,probes=list(probe.median(c("y","z"))),nsim=100))
Error : 'probe.median' is a univariate probe
> try(probe(ricker,probes=list(probe.var(c("y","z"))),nsim=100))
Error : 'probe.var' is a univariate probe
> try(probe(ricker,probes=list(probe.sd(c("y","z"))),nsim=100))
Error : 'probe.sd' is a univariate probe
> try(probe(ricker,probes=list(probe.period(c("y","z"))),nsim=100))
Error : 'probe.period' is a univariate probe
> try(probe(ricker,probes=list(probe.quantile(c("y","z"))),nsim=100))
Error : 'probe.quantile' is a univariate probe
> try(probe(ricker,probes=list(probe.ccf(c("y"))),nsim=100))
Error : in 'probe.ccf': 'vars' must name two variables
> try(probe(ricker,probes=list(probe.marginal(c("y","z"))),nsim=100))
Error : 'probe.marginal' is a univariate probe
> try(probe(ricker,probes=list(probe.nlar(c("y","z"))),nsim=100))
Error : 'probe.nlar' is a univariate probe
> try(probe(ricker,probes=list(probe.nlar("y",lags=c(-3,1))),nsim=100))
Error : in 'probe.nlar': 'lags' and 'powers' must be positive integers
> try(probe(ricker,probes=list(probe.nlar("y",lags=c(1,2),powers=c(-1,2))),nsim=100))
Error : in 'probe.nlar': 'lags' and 'powers' must be positive integers
> try(probe(ricker,probes=list(probe.nlar("y",lags=c(1,2),powers=c(2,3,1))),nsim=100))
Error : in 'probe.nlar': 'lags' must match 'powers' in length, or have length 1
> try(probe(ricker,probes=list(probe.nlar("y",lags=c(1,2,3),powers=c(2,3))),nsim=100))
Error : in 'probe.nlar': 'powers' must match 'lags' in length, or have length 1
> try(probe(ricker,probes="bob",nsim=100))
Error : in 'probe': 'probes' must be a function or a list of functions
> try(probe(ricker,probes=function(x,y){x+y},nsim=100))
Error : in 'probe': each probe must be a function of a single argument
> 
> try(
+     probe(
+         ricker,
+         probes=list(
+             mn=probe.mean("y",transform=sqrt,trim=0.1),
+             md=function(y)median(as.numeric(y)),
+             wacko=function(y) if (y[1]==68) 1 else c(1,2)
+         ),
+         nsim=100,
+         seed=838775L
+     )
+ )
Error : in 'probe': applying probes to simulated data: probes return different number of values on different datasets
> 
> 
> try(
+     probe(
+         ricker,
+         probes=list(
+             mn=probe.mean("y",transform=sqrt,trim=0.1),
+             md=function(y)median(as.numeric(y)),
+             wacko=function(y) if (y[28]==107) c(1,2) else 1
+         ),
+         nsim=20,
+         seed=838775L
+     )
+ )
Error : in 'probe': applying probes to simulated data: probes return different number of values on different datasets
> 
> plot(probe(ricker,nsim=20,probes=list(mn=probe.mean("y",transform=sqrt,trim=0.1))))
> 
> try(probe(ricker,nsim=numeric(),probes=list(mn=probe.mean("y",transform=sqrt,trim=0.1))))
Error : in 'probe': applying probes to simulated data: 'nsim' must be a positive integer
> try(probe(ricker,nsim=c(20,30),probes=list(mn=probe.mean("y",transform=sqrt,trim=0.1))))
Error : in 'probe': applying probes to simulated data: 'nsim' must be a positive integer
> try(probe(ricker,nsim=20,probes=list(garbage=function(x)"A")))
Error : in 'probe': applying probes to actual data: probe 1 returns a non-numeric result
> try(probe(ricker,nsim=20,probes=list(garbage=function(x){
+     n <- sample(c(1,2,3),size=1)
+     runif(n=n)})))
Error : in 'probe': applying probes to simulated data: probes return different number of values on different datasets
> try(probe(ricker,nsim=20,probes=list(garbage=function(x){
+     n <- if (x[12]==0) 5 else 1
+     runif(n=n)})))
Error : in 'probe': applying probes to simulated data: probes return different number of values on different datasets
> 
> ## weird cases
> pompExample(ou2)
newly created object(s):
 ou2 
> ou2@data["y1",] <- NA
> try(probe(ou2,probes=probe.acf("y1",lags=0:3),nsim=100))
Error : in 'probe': applying probes to actual data: in 'probe.acf': series 1 has no data
> try(probe(ou2,probes=probe.ccf(c("y1","y2"),lags=0:3),nsim=100))
Error : in 'probe': applying probes to actual data: in 'probe.ccf': series 1 has no data
> try(probe(ou2,probes=probe.ccf(c("y2","y1"),lags=0:3),nsim=100))
Error : in 'probe': applying probes to actual data: in 'probe.ccf': series 2 has no data
> try(probe(ou2,nsim=100,probes=function(x)"a"))
Error : in 'probe': applying probes to actual data: probe 1 returns a non-numeric result
> try(probe(ou2,nsim=100,probes=function(x)runif(n=sample(c(1,2),size=1))))
Error : in 'probe': applying probes to simulated data: variable-sized results returned by probe 1
> try(probe(ou2,nsim=100,probes=function(x)sample(list("a",2,3),size=1)[[1]]))
Error : in 'probe': applying probes to simulated data: probe 1 returns a non-numeric result
> try(probe.match(ou2,probes=probe.acf("y1",lags=0:3),nsim=100))
Error : in 'probe.match.objfun': applying probes to actual data: in 'probe.acf': series 1 has no data
> try(probe.match(ou2,probes=probe.ccf(c("y2","y1"),lags=0:3),nsim=100))
Error : in 'probe.match.objfun': applying probes to actual data: in 'probe.ccf': series 2 has no data
> try(probe.match(ou2))
Error : in 'probe.match': 'probes' must be supplied
> try(probe.match(ou2,probes=probe.ccf(c("y2","y1"),lags=0:3)))
Error : in 'probe.match': 'nsim' must be supplied
> 
> ## elaborate test to trigger rare error
> nprobe <- 0
> sizes <- c(5,rep(1,100))
> try(probe(ou2,nsim=100,probes=function(x){
+     nprobe <<- nprobe+1
+     runif(n=sizes[nprobe])
+ }))
Error : in 'probe': applying probes to simulated data: probes return different number of values on different datasets
> 
> pompExample(ou2)
newly created object(s):
 ou2 
> try(probe.match(ou2,probes=probe.ccf(c("y2","y1"),lags=0:3),nsim=2))
Error : in 'probe.match.objfun': in synthetic likelihood computation: 'nsim' (=2) should be (much) larger than the number of probes (=4)
> try(probe(ou2,probes=probe.ccf(c("y2","y1"),lags=0:3),nsim=2))
Error : in 'probe': in synthetic likelihood computation: 'nsim' (=2) should be (much) larger than the number of probes (=4)
> 
> coef(ou2,c("alpha.2","alpha.4","sigma.2","sigma.3","tau")) <- 0
> ignore <- probe(ou2,probes=probe.nlar("y2",lags=1:3,powers=c(1,2,2)),nsim=100)
> 
> neval <- 0
> try(probe(ou2,nsim=100,
+           probes=probe.marginal("y1",transform=function(x) {
+               neval <<- neval+1
+               if (neval>1) stop("oof!")
+               else x
+           },
+           ref=obs(ou2,"y1"),diff=2,order=3)))
Error : in 'probe': applying probes to actual data: in 'probe.marginal': oof!
> neval <- 0
> try(probe(ou2,nsim=100,
+           probes=probe.nlar("y1",transform=function(x) {
+               neval <<- neval+1
+               if (neval>1) stop("urp!")
+               else x
+           },
+           lags=c(1,2,2),powers=c(1,1,2))))
Error : in 'probe': applying probes to simulated data: in 'probe.nlar': urp!
> 
> neval <- 0
> try(probe.match(ricker,est=c("r","phi","N_0"),nsim=100,
+                 probes=function(y)stop("yipes!")))
Error : in 'probe.match.objfun': applying probes to actual data: yipes!
> try(probe.match(ricker,est=c("r","phi","N_0"),nsim=100,
+                 probes=function(y){
+                     neval <<- neval+1
+                     if (neval>1) stop("jeepers!")
+                     else 1
+                 }))
Error : in 'subplex': in 'probe.match.objfun': applying probes to simulated data: jeepers!
> neval <- 0
> try(probe.match(pm,nsim=100,maxit=10,seed=404375241L,
+             probes=function(y){
+               neval <<- neval+1
+               if (neval<1402) pm@probes[[1]](y) else stop("criminy!")
+             }) -> ignore)
Error : in 'probe.match': in 'probe': applying probes to simulated data: criminy!
> 
> dev.off()
null device 
          1 
> 
