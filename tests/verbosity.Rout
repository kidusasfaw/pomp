
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> capture.output({
+ 
+     library(pomp)
+ 
+     options(digits=3,verbose=TRUE,keep.source=TRUE)
+ 
+     set.seed(398585L)
+     pompExample(ou2)
+ 
+     time(ou2) <- 1:20
+ 
+     Np <- 100
+ 
+     prior.bounds <- rbind(
+         alpha.2=c(-0.55,-0.45),
+         alpha.3=c(0.25,0.35)
+     )
+ 
+     pomp(ou2,
+          rprior=function(params,...) {
+              params[c("alpha.2","alpha.3")] <-
+                  runif(n=1,min=prior.bounds[,1],max=prior.bounds[,2])
+              params
+          },
+          dprior=function(params,log,...) {
+              f <- sum(dunif(params,min=coef(ou2)-1,max=coef(ou2)+1,log=TRUE))
+              if (log) f else exp(f)
+          }
+          ) -> ou2
+ 
+     f1 <- bsmc(ou2,est="alpha.2",Np=100,smooth=0.02)
+     try(bsmc(ou2,est="alpha.2",Np=2,smooth=0.02))
+     f1 <- bsmc2(ou2,est="alpha.2",Np=100,smooth=0.02)
+     try(bsmc(ou2,est=c("alpha.1","alpha.2"),Np=1,smooth=0.02))
+     try(bsmc2(ou2,est="alpha.2",Np=1,smooth=0.02))
+     try(bsmc2(ou2,est="alpha.2",Np=2,smooth=0.02))
+     f1 <- ou2
+     f1@data[,c(3,20)] <- c(10000,10000)
+     try(f1 <- bsmc2(f1,est=c("alpha.2","alpha.4"),Np=100,smooth=0.01,max.fail=3))
+     prop <- mvn.diag.rw(c(alpha.2=0.001,alpha.3=0.001))
+     f2 <- pmcmc(ou2,Nmcmc=20,proposal=prop,Np=100)
+     f3 <- ou2
+     f3@data[,20] <- c(1000,1000)
+     timezero(f3) <- 1
+     f3 <- pfilter(f3,Np=10,filter.traj=TRUE)
+     f3 <- pfilter(ou2,Np=100)
+     f4 <- mif(f3,Nmif=10,rw.sd=c(alpha.2=0.01,alpha.3=0.01),cooling.fraction.50=0.1)
+     f5 <- mif2(f3,Nmif=10,rw.sd=rw.sd(alpha.2=0.01,alpha.3=0.01),
+                cooling.fraction.50=0.1)
+     plist <- list(
+         y1.mean=probe.mean(var="y1"),
+         y2.mean=probe.mean(var="y2"),
+         probe.acf(var="y1",lags=c(0,5)),
+         probe.acf(var="y2",lags=c(0,5)),
+         probe.ccf(vars=c("y1","y2"),lags=0)
+     )
+     f6 <- probe(ou2,probes=plist,nsim=200)
+     f7 <- probe.match(f6,est=c("alpha.2","alpha.3"))
+     f8 <- abc(f7,Nabc=20,est=c("alpha.2","alpha.3"),
+               proposal=prop,scale=1,epsilon=20)
+     f9 <- nlf(ou2,lags=c(1,2),est=c("alpha.2","alpha.3","tau"),
+               nconverge=100,nasymp=2000,lql.frac=0.025,
+               seed=426094906L,maxit=200,method="Nelder-Mead")
+     f10 <- traj.match(f9,est=c("alpha.2","alpha.3","tau"))
+ 
+     pompExample(ricker)
+     try(pomp(ricker,rmeasure=Csnippet("y=rpois(N)"),statenames="N") -> po)
+ }) -> out
Welcome to pomp version 1.19!
pomp version 2 is now available on https://kingaa.github.io/pomp/.
This new version contains many improvements but is not backward compatible.
To allow users time to modify their codes, 'pomp' version 2 will be provided as package 'pomp2' for a short while.

Around the middle of 2019, 'pomp2' will be renamed 'pomp' version 2.1 and will be released to CRAN. Until then, 'pomp' versions < 2 will continue to be available.

See the 'pomp version 2 upgrade guide' at https://kingaa.github.io/pomp/.
filtering failure at time t = 12
Error : in 'bsmc': too many filtering failures
In addition: Warning messages:
1: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/userdata/kingaa/projects/Rpkg/pomp1/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
2: In library(pomp) : package 'pomp' already present in search()
3: 'bsmc' is deprecated and will be removed in a forthcoming release.  Consider using 'bsmc2'. 
4: 'bsmc' is deprecated and will be removed in a forthcoming release.  Consider using 'bsmc2'. 
Error : in 'bsmc': in 'rmvnorm': infinite or missing values in 'x'
In addition: Warning message:
'bsmc' is deprecated and will be removed in a forthcoming release.  Consider using 'bsmc2'. 
Error : in 'bsmc2': in 'rmvnorm': infinite or missing values in 'x'
filtering failure at time t = 4
Error : in 'bsmc2': too many filtering failures
filtering failure at time t = 3
filtering failure at time t = 20
filtering failure at time t = 20
Error : in 'pomp': error in building shared-object library from C snippets: in 'Cbuilder': compilation error: cannot compile shared-object library '/tmp/Rtmpks7IPq/99282/pomp_f8b8568eaeaab62ebc7dc89fa3698ddf.so': status = 1
compiler messages:
make[2]: Entering directory `/userdata/kingaa/projects/Rpkg/pomp1/tests'
gcc -std=gnu99 -I"/usr/local/apps/R/R-3.5.1/lib64/R/include" -DNDEBUG -I/userdata/kingaa/projects/Rpkg/pomp1/library/pomp/include -I/userdata/kingaa/projects/Rpkg/pomp1/tests  -I/usr/local/include   -fpic  -g -O2 -Wall -pedantic -c /tmp/Rtmpks7IPq/99282/pomp_f8b8568eaeaab62ebc7dc89fa3698ddf.c -o /tmp/Rtmpks7IPq/99282/pomp_f8b8568eaeaab62ebc7dc89fa3698ddf.o
/tmp/Rtmpks7IPq/99282/pomp_f8b8568eaeaab62ebc7dc89fa3698ddf.c: In function ‘__pomp_rmeasure’:
/tmp/Rtmpks7IPq/99282/pomp_f8b8568eaeaab62ebc7dc89fa3698ddf.c:18:1: error: expected ‘;’ before ‘}’ token
 }
 ^
make[2]: *** [/tmp/Rtmpks7IPq/99282/pomp_f8b8568eaeaab62ebc7dc89fa3698ddf.o] Error 1
make[2]: Leaving directory `/userdata/kingaa/projects/Rpkg/pomp1/tests'
make[2]: Entering directory `/userdata/kingaa/projects/Rpkg/pomp1/tests'
make[2]: Leaving directory `/userdata/kingaa/projects/Rpkg/pomp1/tests'
In addition: Warning messages:
1: in 'bsmc2': 2 filtering failures occurred. 
2: in 'pfilter': 1 filtering failure occurred. 
3: 'mif' is deprecated and will be removed in a forthcoming release. Consider using 'mif2' instead. 
4: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/userdata/kingaa/projects/Rpkg/pomp1/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
5: In library(pomp) : package 'pomp' already present in search()
6: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/userdata/kingaa/projects/Rpkg/pomp1/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
7: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/userdata/kingaa/projects/Rpkg/pomp1/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
8: In system2(command = R.home("bin/R"), args = c("CMD", "SHLIB", "-c",  :
  running command 'PKG_CPPFLAGS="-I/userdata/kingaa/projects/Rpkg/pomp1/library/pomp/include -I/userdata/kingaa/projects/Rpkg/pomp1/tests" '/usr/local/apps/R/R-3.5.1/lib64/R/bin/R' CMD SHLIB -c -o /tmp/Rtmpks7IPq/99282/pomp_f8b8568eaeaab62ebc7dc89fa3698ddf.so /tmp/Rtmpks7IPq/99282/pomp_f8b8568eaeaab62ebc7dc89fa3698ddf.c 2>&1' had status 1
> length(out)
[1] 685
> stopifnot(sum(grepl("mif2 pfilter",out))==40)
> stopifnot(sum(grepl("model codes written",out))==2)
> stopifnot(sum(grepl("fitted param",out))==6)
> stopifnot(sum(grepl("ABC iteration",out))==5)
> stopifnot(sum(grepl("acceptance ratio:",out))==24)
> stopifnot(sum(grepl("pfilter timestep",out))==88)
> stopifnot(sum(grepl("mif iteration",out))==10)
> stopifnot(sum(grepl("prior.mean",out))==78)
> stopifnot(sum(grepl("effective sample size",out))==74)
> stopifnot(sum(grepl("mif2 iteration",out))==10)
> stopifnot(sum(grepl("h in",out))==1)
> 
> invisible(capture.output(pompExample(ricker)))
Warning messages:
1: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/userdata/kingaa/projects/Rpkg/pomp1/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
2: In library(pomp) : package 'pomp' already present in search()
3: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/userdata/kingaa/projects/Rpkg/pomp1/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
> capture.output(simulate(pomp(ricker,rmeasure=Csnippet("y=rpois(N);"),statenames="N",
+   cfile="bob",verbose=TRUE),verbose=TRUE) -> po) -> out
Warning message:
In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/userdata/kingaa/projects/Rpkg/pomp1/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
> gsub("(\\w+)\\s.+","\\1",out,perl=TRUE)
 [1] "model"             "compiling"         "compiler"         
 [4] "make[2]: Entering" "gcc"               "gcc"              
 [7] "make[2]: Leaving"  "make[2]: Entering" "make[2]: Leaving" 
[10] "loading"           "loading"           "unloading"        
[13] "unloading"        
> 
> set.seed(3949586L)
> capture.output(invisible(mif2(window(ricker,end=10),Nmif=1,Np=1,rw.sd=rw.sd(r=1),
+   transform=TRUE,cooling.fraction.50=1,verbose=TRUE)),
+   type="message") -> out
loading '/tmp/Rtmpks7IPq/99282/pomp_e39751643d9484ef89ef68d2ad8427da.so' 
mif2 pfilter timestep 5 of 11 finished
mif2 pfilter timestep 10 of 11 finished
mif2 iteration 1 of 1 completed
unloading '/tmp/Rtmpks7IPq/99282/pomp_e39751643d9484ef89ef68d2ad8427da.so' 
Warning message:
in 'mif2.pfilter': 5 filtering failures occurred. 
> stopifnot(sum(grepl("filtering failure at time",out))==5)
> 
> set.seed(3949586L)
> capture.output(invisible(mif(window(ricker,end=10),Nmif=1,Np=1,rw.sd=c(r=1),
+                              transform=TRUE,cooling.fraction.50=1,verbose=TRUE)),
+                type="message") -> out
loading '/tmp/Rtmpks7IPq/99282/pomp_e39751643d9484ef89ef68d2ad8427da.so' 
pfilter timestep 5 of 11 finished
pfilter timestep 10 of 11 finished
mif iteration 1 of 1 completed
unloading '/tmp/Rtmpks7IPq/99282/pomp_e39751643d9484ef89ef68d2ad8427da.so' 
Warning messages:
1: 'mif' is deprecated and will be removed in a forthcoming release. Consider using 'mif2' instead. 
2: in 'mif.pfilter': 5 filtering failures occurred. 
> stopifnot(sum(grepl("filtering failure at time",out))==5)
> 
> capture.output(pompExample(dacca)) -> out
Warning messages:
1: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/userdata/kingaa/projects/Rpkg/pomp1/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
2: In library(pomp) : package 'pomp' already present in search()
3: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/userdata/kingaa/projects/Rpkg/pomp1/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
> spy(dacca)
==================
pomp object 'dacca':

- 600 records of 1 observable, recorded from t = 1891 to 1941 
- zero time, t0 = 1891
- summary of data:
 cholera.deaths
 Min.   :   2  
 1st Qu.:  46  
 Median : 294  
 Mean   : 590  
 3rd Qu.: 772  
 Max.   :5596  
- 5017 records of 9 covariates, recorded from t = 1891 to 1941 
- summary of covariates:
     seas1           seas2           seas3           seas4      
 Min.   :0.000   Min.   :0.000   Min.   :0.000   Min.   :0.000  
 1st Qu.:0.000   1st Qu.:0.000   1st Qu.:0.000   1st Qu.:0.000  
 Median :0.023   Median :0.021   Median :0.018   Median :0.018  
 Mean   :0.168   Mean   :0.167   Mean   :0.166   Mean   :0.166  
 3rd Qu.:0.322   3rd Qu.:0.296   3rd Qu.:0.309   3rd Qu.:0.309  
 Max.   :0.666   Max.   :0.667   Max.   :0.666   Max.   :0.666  
     seas5           seas6            pop              dpopdt     
 Min.   :0.000   Min.   :0.000   Min.   :2420656   Min.   :13824  
 1st Qu.:0.000   1st Qu.:0.000   1st Qu.:2729310   1st Qu.:19940  
 Median :0.021   Median :0.023   Median :3055864   Median :27660  
 Mean   :0.166   Mean   :0.167   Mean   :3089849   Mean   :36207  
 3rd Qu.:0.296   3rd Qu.:0.322   3rd Qu.:3318329   3rd Qu.:40816  
 Max.   :0.667   Max.   :0.666   Max.   :4236627   Max.   :90533  
     trend      
 Min.   :-25.1  
 1st Qu.:-12.5  
 Median :  0.0  
 Mean   :  0.0  
 3rd Qu.: 12.5  
 Max.   : 25.1  
- Euler-method process-model simulator, step.fun = native function '__pomp_stepfn', defined by a Csnippet
- process model density, dprocess = not specified
- measurement model simulator, rmeasure = native function '__pomp_rmeasure', defined by a Csnippet
- measurement model density, dmeasure = native function '__pomp_dmeasure', defined by a Csnippet
- prior simulator, rprior = not specified
- prior density, dprior = native function '_pomp_default_dprior', dynamically loaded from 'pomp'
- skeleton = not specified
- initializer = native function '__pomp_rinit', defined by a Csnippet
- parameter transformation (to estimation scale) = native function '__pomp_to_trans', defined by a Csnippet
- parameter transformation (from estimation scale) = native function '__pomp_from_trans', defined by a Csnippet
- parameter(s):
     gamma        eps        rho      delta     deltaI       clin      alpha 
  2.08e+01   1.91e+01   0.00e+00   2.00e-02   6.00e-02   1.00e+00   1.00e+00 
beta_trend   logbeta1   logbeta2   logbeta3   logbeta4   logbeta5   logbeta6 
 -4.98e-03   7.47e-01   6.38e+00  -3.44e+00   4.23e+00   3.33e+00   4.55e+00 
 logomega1  logomega2  logomega3  logomega4  logomega5  logomega6    sd_beta 
 -1.69e+00  -2.54e+00  -2.84e+00  -4.69e+00  -8.48e+00  -4.39e+00   3.13e+00 
       tau        S_0        I_0        Y_0       R1_0       R2_0       R3_0 
  2.30e-01   6.21e-01   3.78e-01   0.00e+00   8.43e-04   9.72e-04   1.16e-07 
- C snippet file 1:

/* pomp C snippet file: pomp_589b1032ce8be5317703cbb47ced4980 */
/* Time: 2018-12-13 12:56:02.457 -0500 */
/* Salt: EE444509B5E4E6D45828ABC6 */

#include <pomp.h>
#include <R_ext/Rdynload.h>

int nrstage = 3, nbasis = 6; 


/* C snippet: 'initializer' */
#define tau		(__p[__parindex[0]])
#define gamma		(__p[__parindex[1]])
#define eps		(__p[__parindex[2]])
#define delta		(__p[__parindex[3]])
#define deltaI		(__p[__parindex[4]])
#define logomega1		(__p[__parindex[5]])
#define sd_beta		(__p[__parindex[6]])
#define beta_trend		(__p[__parindex[7]])
#define logbeta1		(__p[__parindex[8]])
#define alpha		(__p[__parindex[9]])
#define rho		(__p[__parindex[10]])
#define clin		(__p[__parindex[11]])
#define S_0		(__p[__parindex[12]])
#define I_0		(__p[__parindex[13]])
#define Y_0		(__p[__parindex[14]])
#define R1_0		(__p[__parindex[15]])
#define seas1		(__covars[__covindex[0]])
#define seas2		(__covars[__covindex[1]])
#define seas3		(__covars[__covindex[2]])
#define seas4		(__covars[__covindex[3]])
#define seas5		(__covars[__covindex[4]])
#define seas6		(__covars[__covindex[5]])
#define pop		(__covars[__covindex[6]])
#define dpopdt		(__covars[__covindex[7]])
#define trend		(__covars[__covindex[8]])
#define S		(__x[__stateindex[0]])
#define I		(__x[__stateindex[1]])
#define Y		(__x[__stateindex[2]])
#define R1		(__x[__stateindex[3]])
#define R2		(__x[__stateindex[4]])
#define R3		(__x[__stateindex[5]])
#define deaths		(__x[__stateindex[6]])
#define W		(__x[__stateindex[7]])
#define count		(__x[__stateindex[8]])

void __pomp_rinit (double *__x, const double *__p, double t, const int *__stateindex, const int *__parindex, const int *__covindex, const double *__covars)
{
 
  int k;
  double sum = S_0+I_0+Y_0;
  double *R = &R1;
  const double *R0 = &R1_0;
  for (k = 0; k < nrstage; k++) sum += R0[k];
  S = nearbyint(pop*S_0/sum);
  I = nearbyint(pop*I_0/sum);
  Y = nearbyint(pop*Y_0/sum);
  for (k = 0; k < nrstage; k++) R[k] = nearbyint(pop*R0[k]/sum);
  W = 0;
  deaths = 0;
  count = 0;
 
}

#undef tau
#undef gamma
#undef eps
#undef delta
#undef deltaI
#undef logomega1
#undef sd_beta
#undef beta_trend
#undef logbeta1
#undef alpha
#undef rho
#undef clin
#undef S_0
#undef I_0
#undef Y_0
#undef R1_0
#undef seas1
#undef seas2
#undef seas3
#undef seas4
#undef seas5
#undef seas6
#undef pop
#undef dpopdt
#undef trend
#undef S
#undef I
#undef Y
#undef R1
#undef R2
#undef R3
#undef deaths
#undef W
#undef count

/* C snippet: 'step.fn' */
#define tau		(__p[__parindex[0]])
#define gamma		(__p[__parindex[1]])
#define eps		(__p[__parindex[2]])
#define delta		(__p[__parindex[3]])
#define deltaI		(__p[__parindex[4]])
#define logomega1		(__p[__parindex[5]])
#define sd_beta		(__p[__parindex[6]])
#define beta_trend		(__p[__parindex[7]])
#define logbeta1		(__p[__parindex[8]])
#define alpha		(__p[__parindex[9]])
#define rho		(__p[__parindex[10]])
#define clin		(__p[__parindex[11]])
#define S_0		(__p[__parindex[12]])
#define I_0		(__p[__parindex[13]])
#define Y_0		(__p[__parindex[14]])
#define R1_0		(__p[__parindex[15]])
#define seas1		(__covars[__covindex[0]])
#define seas2		(__covars[__covindex[1]])
#define seas3		(__covars[__covindex[2]])
#define seas4		(__covars[__covindex[3]])
#define seas5		(__covars[__covindex[4]])
#define seas6		(__covars[__covindex[5]])
#define pop		(__covars[__covindex[6]])
#define dpopdt		(__covars[__covindex[7]])
#define trend		(__covars[__covindex[8]])
#define S		(__x[__stateindex[0]])
#define I		(__x[__stateindex[1]])
#define Y		(__x[__stateindex[2]])
#define R1		(__x[__stateindex[3]])
#define R2		(__x[__stateindex[4]])
#define R3		(__x[__stateindex[5]])
#define deaths		(__x[__stateindex[6]])
#define W		(__x[__stateindex[7]])
#define count		(__x[__stateindex[8]])

void __pomp_stepfn (double *__x, const double *__p, const int *__stateindex, const int *__parindex, const int *__covindex, int __covdim, const double *__covars, double t, double dt)
{
 
  double births;
  double infections;
  double sdeaths;
  double ideaths;
  double ydeaths;
  double rdeaths[nrstage];
  double disease;
  double wanings;
  double passages[nrstage+1];
  double effI;
  double neps;
  double beta;
  double omega;
  double dw;
  double *pt;
  int j;

  if (count != 0.0) return;

  neps = eps*nrstage;

  beta = exp(dot_product(nbasis,&seas1,&logbeta1)+beta_trend*trend);
  omega = exp(dot_product(nbasis,&seas1,&logomega1));

  dw = rnorm(0,sqrt(dt));	// white noise

  effI = pow(I/pop,alpha);
  births = dpopdt + delta*pop;	// births

  passages[0] = gamma*I;	// recovery
  ideaths = delta*I;	        // natural i deaths
  disease = deltaI*I;	        // disease death
  ydeaths = delta*Y;     	// natural rs deaths
  wanings = rho*Y;		// loss of immunity

  for (pt = &R1, j = 0; j < nrstage; j++, pt++) {
    rdeaths[j] = *pt*delta;	// natural R deaths
    passages[j+1] = *pt*neps;	// passage to the next immunity class
  }

  infections = (omega+(beta+sd_beta*dw/dt)*effI)*S; // infection
  sdeaths = delta*S;	        // natural S deaths

  S += (births - infections - sdeaths + passages[nrstage] + wanings)*dt;
  I += (clin*infections - disease - ideaths - passages[0])*dt;
  Y += ((1-clin)*infections - ydeaths - wanings)*dt;
  for (pt = &R1, j = 0; j < nrstage; j++, pt++) 
    *pt += (passages[j] - passages[j+1] - rdeaths[j])*dt;
  deaths += disease*dt;		// cumulative deaths due to disease
  W += dw;

  // check for violations of positivity constraints
  // nonzero 'count' variable signals violation
  if (S < 0.0) {
    S = 0.0; I = 0.0; Y = 0.0; 
    count += 1; 
  }
  if (I < 0.0) {
    I = 0.0; S = 0.0; 
    count += 1e3; 
  }
  if (Y < 0.0) { 
    Y = 0.0; S = 0.0; 
    count += 1e6; 
  }
  if (deaths < 0.0) { 
    deaths = 0.0; 
    count += 1e9; 
  }
  for (pt = &R1, j = 0; j < nrstage-1; j++, pt++) {
    if (*pt < 0.0) {
      *pt = 0.0; *(pt+1) = 0.0;
      count += 1e12; 
    }
  }
  if (*pt < 0.0) {
    *pt = 0.0; S = 0.0;
    count += 1e12;
  }
 
}

#undef tau
#undef gamma
#undef eps
#undef delta
#undef deltaI
#undef logomega1
#undef sd_beta
#undef beta_trend
#undef logbeta1
#undef alpha
#undef rho
#undef clin
#undef S_0
#undef I_0
#undef Y_0
#undef R1_0
#undef seas1
#undef seas2
#undef seas3
#undef seas4
#undef seas5
#undef seas6
#undef pop
#undef dpopdt
#undef trend
#undef S
#undef I
#undef Y
#undef R1
#undef R2
#undef R3
#undef deaths
#undef W
#undef count

/* C snippet: 'rmeasure' */
#define tau		(__p[__parindex[0]])
#define gamma		(__p[__parindex[1]])
#define eps		(__p[__parindex[2]])
#define delta		(__p[__parindex[3]])
#define deltaI		(__p[__parindex[4]])
#define logomega1		(__p[__parindex[5]])
#define sd_beta		(__p[__parindex[6]])
#define beta_trend		(__p[__parindex[7]])
#define logbeta1		(__p[__parindex[8]])
#define alpha		(__p[__parindex[9]])
#define rho		(__p[__parindex[10]])
#define clin		(__p[__parindex[11]])
#define S_0		(__p[__parindex[12]])
#define I_0		(__p[__parindex[13]])
#define Y_0		(__p[__parindex[14]])
#define R1_0		(__p[__parindex[15]])
#define seas1		(__covars[__covindex[0]])
#define seas2		(__covars[__covindex[1]])
#define seas3		(__covars[__covindex[2]])
#define seas4		(__covars[__covindex[3]])
#define seas5		(__covars[__covindex[4]])
#define seas6		(__covars[__covindex[5]])
#define pop		(__covars[__covindex[6]])
#define dpopdt		(__covars[__covindex[7]])
#define trend		(__covars[__covindex[8]])
#define S		(__x[__stateindex[0]])
#define I		(__x[__stateindex[1]])
#define Y		(__x[__stateindex[2]])
#define R1		(__x[__stateindex[3]])
#define R2		(__x[__stateindex[4]])
#define R3		(__x[__stateindex[5]])
#define deaths		(__x[__stateindex[6]])
#define W		(__x[__stateindex[7]])
#define count		(__x[__stateindex[8]])
#define cholera_deaths		(__y[__obsindex[0]])

void __pomp_rmeasure (double *__y, const double *__x, const double *__p, const int *__obsindex, const int *__stateindex, const int *__parindex, const int *__covindex, int __ncovars, const double *__covars, double t)
{
 
  double v, tol = 1.0e-18;
  v = deaths*tau;
  if ((count > 0) || (!(R_FINITE(v)))) {
    cholera_deaths = R_NaReal;
  } else {
    cholera_deaths = rnorm(deaths,v+tol);
  }
 
}

#undef tau
#undef gamma
#undef eps
#undef delta
#undef deltaI
#undef logomega1
#undef sd_beta
#undef beta_trend
#undef logbeta1
#undef alpha
#undef rho
#undef clin
#undef S_0
#undef I_0
#undef Y_0
#undef R1_0
#undef seas1
#undef seas2
#undef seas3
#undef seas4
#undef seas5
#undef seas6
#undef pop
#undef dpopdt
#undef trend
#undef S
#undef I
#undef Y
#undef R1
#undef R2
#undef R3
#undef deaths
#undef W
#undef count
#undef cholera_deaths

/* C snippet: 'dmeasure' */
#define tau		(__p[__parindex[0]])
#define gamma		(__p[__parindex[1]])
#define eps		(__p[__parindex[2]])
#define delta		(__p[__parindex[3]])
#define deltaI		(__p[__parindex[4]])
#define logomega1		(__p[__parindex[5]])
#define sd_beta		(__p[__parindex[6]])
#define beta_trend		(__p[__parindex[7]])
#define logbeta1		(__p[__parindex[8]])
#define alpha		(__p[__parindex[9]])
#define rho		(__p[__parindex[10]])
#define clin		(__p[__parindex[11]])
#define S_0		(__p[__parindex[12]])
#define I_0		(__p[__parindex[13]])
#define Y_0		(__p[__parindex[14]])
#define R1_0		(__p[__parindex[15]])
#define seas1		(__covars[__covindex[0]])
#define seas2		(__covars[__covindex[1]])
#define seas3		(__covars[__covindex[2]])
#define seas4		(__covars[__covindex[3]])
#define seas5		(__covars[__covindex[4]])
#define seas6		(__covars[__covindex[5]])
#define pop		(__covars[__covindex[6]])
#define dpopdt		(__covars[__covindex[7]])
#define trend		(__covars[__covindex[8]])
#define S		(__x[__stateindex[0]])
#define I		(__x[__stateindex[1]])
#define Y		(__x[__stateindex[2]])
#define R1		(__x[__stateindex[3]])
#define R2		(__x[__stateindex[4]])
#define R3		(__x[__stateindex[5]])
#define deaths		(__x[__stateindex[6]])
#define W		(__x[__stateindex[7]])
#define count		(__x[__stateindex[8]])
#define cholera_deaths		(__y[__obsindex[0]])
#define lik		(__lik[0])

void __pomp_dmeasure (double *__lik, const double *__y, const double *__x, const double *__p, int give_log, const int *__obsindex, const int *__stateindex, const int *__parindex, const int *__covindex, int __ncovars, const double *__covars, double t)
{
 
  double v, tol = 1.0e-18;
  v = deaths*tau;
  if ((count>0.0) || (!(R_FINITE(v)))) {
    lik = tol;
  } else {
    lik = dnorm(cholera_deaths,deaths,v+tol,0)+tol;
  }
  if (give_log) lik = log(lik);
 
}

#undef tau
#undef gamma
#undef eps
#undef delta
#undef deltaI
#undef logomega1
#undef sd_beta
#undef beta_trend
#undef logbeta1
#undef alpha
#undef rho
#undef clin
#undef S_0
#undef I_0
#undef Y_0
#undef R1_0
#undef seas1
#undef seas2
#undef seas3
#undef seas4
#undef seas5
#undef seas6
#undef pop
#undef dpopdt
#undef trend
#undef S
#undef I
#undef Y
#undef R1
#undef R2
#undef R3
#undef deaths
#undef W
#undef count
#undef cholera_deaths
#undef lik

/* C snippet: 'fromEstimationScale' */
#define seas1		(__covars[__covindex[0]])
#define seas2		(__covars[__covindex[1]])
#define seas3		(__covars[__covindex[2]])
#define seas4		(__covars[__covindex[3]])
#define seas5		(__covars[__covindex[4]])
#define seas6		(__covars[__covindex[5]])
#define pop		(__covars[__covindex[6]])
#define dpopdt		(__covars[__covindex[7]])
#define trend		(__covars[__covindex[8]])
#define tau		(__p[__parindex[0]])
#define gamma		(__p[__parindex[1]])
#define eps		(__p[__parindex[2]])
#define delta		(__p[__parindex[3]])
#define deltaI		(__p[__parindex[4]])
#define logomega1		(__p[__parindex[5]])
#define sd_beta		(__p[__parindex[6]])
#define beta_trend		(__p[__parindex[7]])
#define logbeta1		(__p[__parindex[8]])
#define alpha		(__p[__parindex[9]])
#define rho		(__p[__parindex[10]])
#define clin		(__p[__parindex[11]])
#define S_0		(__p[__parindex[12]])
#define I_0		(__p[__parindex[13]])
#define Y_0		(__p[__parindex[14]])
#define R1_0		(__p[__parindex[15]])
#define Ttau		(__pt[__parindex[0]])
#define Tgamma		(__pt[__parindex[1]])
#define Teps		(__pt[__parindex[2]])
#define Tdelta		(__pt[__parindex[3]])
#define TdeltaI		(__pt[__parindex[4]])
#define Tlogomega1		(__pt[__parindex[5]])
#define Tsd_beta		(__pt[__parindex[6]])
#define Tbeta_trend		(__pt[__parindex[7]])
#define Tlogbeta1		(__pt[__parindex[8]])
#define Talpha		(__pt[__parindex[9]])
#define Trho		(__pt[__parindex[10]])
#define Tclin		(__pt[__parindex[11]])
#define TS_0		(__pt[__parindex[12]])
#define TI_0		(__pt[__parindex[13]])
#define TY_0		(__pt[__parindex[14]])
#define TR1_0		(__pt[__parindex[15]])

void __pomp_from_trans (double *__pt, const double *__p, const int *__parindex)
{
 
  Ttau = exp(tau);
  Tgamma = exp(gamma);
  Teps = exp(eps);
  Tdelta = exp(delta);
  TdeltaI = exp(deltaI);
  Tsd_beta = exp(sd_beta);
  Talpha = exp(alpha);
  Trho = exp(rho);
  Tclin = expit(clin);
  from_log_barycentric(&TS_0,&S_0,nrstage+3);
 
}

#undef seas1
#undef seas2
#undef seas3
#undef seas4
#undef seas5
#undef seas6
#undef pop
#undef dpopdt
#undef trend
#undef tau
#undef gamma
#undef eps
#undef delta
#undef deltaI
#undef logomega1
#undef sd_beta
#undef beta_trend
#undef logbeta1
#undef alpha
#undef rho
#undef clin
#undef S_0
#undef I_0
#undef Y_0
#undef R1_0
#undef Ttau
#undef Tgamma
#undef Teps
#undef Tdelta
#undef TdeltaI
#undef Tlogomega1
#undef Tsd_beta
#undef Tbeta_trend
#undef Tlogbeta1
#undef Talpha
#undef Trho
#undef Tclin
#undef TS_0
#undef TI_0
#undef TY_0
#undef TR1_0

/* C snippet: 'toEstimationScale' */
#define seas1		(__covars[__covindex[0]])
#define seas2		(__covars[__covindex[1]])
#define seas3		(__covars[__covindex[2]])
#define seas4		(__covars[__covindex[3]])
#define seas5		(__covars[__covindex[4]])
#define seas6		(__covars[__covindex[5]])
#define pop		(__covars[__covindex[6]])
#define dpopdt		(__covars[__covindex[7]])
#define trend		(__covars[__covindex[8]])
#define tau		(__p[__parindex[0]])
#define gamma		(__p[__parindex[1]])
#define eps		(__p[__parindex[2]])
#define delta		(__p[__parindex[3]])
#define deltaI		(__p[__parindex[4]])
#define logomega1		(__p[__parindex[5]])
#define sd_beta		(__p[__parindex[6]])
#define beta_trend		(__p[__parindex[7]])
#define logbeta1		(__p[__parindex[8]])
#define alpha		(__p[__parindex[9]])
#define rho		(__p[__parindex[10]])
#define clin		(__p[__parindex[11]])
#define S_0		(__p[__parindex[12]])
#define I_0		(__p[__parindex[13]])
#define Y_0		(__p[__parindex[14]])
#define R1_0		(__p[__parindex[15]])
#define Ttau		(__pt[__parindex[0]])
#define Tgamma		(__pt[__parindex[1]])
#define Teps		(__pt[__parindex[2]])
#define Tdelta		(__pt[__parindex[3]])
#define TdeltaI		(__pt[__parindex[4]])
#define Tlogomega1		(__pt[__parindex[5]])
#define Tsd_beta		(__pt[__parindex[6]])
#define Tbeta_trend		(__pt[__parindex[7]])
#define Tlogbeta1		(__pt[__parindex[8]])
#define Talpha		(__pt[__parindex[9]])
#define Trho		(__pt[__parindex[10]])
#define Tclin		(__pt[__parindex[11]])
#define TS_0		(__pt[__parindex[12]])
#define TI_0		(__pt[__parindex[13]])
#define TY_0		(__pt[__parindex[14]])
#define TR1_0		(__pt[__parindex[15]])

void __pomp_to_trans (double *__pt, const double *__p, const int *__parindex)
{
 
  Ttau = log(tau);
  Tgamma = log(gamma);
  Teps = log(eps);
  Tdelta = log(delta);
  TdeltaI = log(deltaI);
  Tsd_beta = log(sd_beta);
  Talpha = log(alpha);
  Trho = log(rho);
  Tclin = logit(clin);
  to_log_barycentric(&TS_0,&S_0,nrstage+3);
 
}

#undef seas1
#undef seas2
#undef seas3
#undef seas4
#undef seas5
#undef seas6
#undef pop
#undef dpopdt
#undef trend
#undef tau
#undef gamma
#undef eps
#undef delta
#undef deltaI
#undef logomega1
#undef sd_beta
#undef beta_trend
#undef logbeta1
#undef alpha
#undef rho
#undef clin
#undef S_0
#undef I_0
#undef Y_0
#undef R1_0
#undef Ttau
#undef Tgamma
#undef Teps
#undef Tdelta
#undef TdeltaI
#undef Tlogomega1
#undef Tsd_beta
#undef Tbeta_trend
#undef Tlogbeta1
#undef Talpha
#undef Trho
#undef Tclin
#undef TS_0
#undef TI_0
#undef TY_0
#undef TR1_0

static int __pomp_load_stack = 0;

void __pomp_load_stack_incr (void) {++__pomp_load_stack;}

void __pomp_load_stack_decr (int *val) {*val = --__pomp_load_stack;}

void R_init_pomp_589b1032ce8be5317703cbb47ced4980 (DllInfo *info)
{
R_RegisterCCallable("pomp_589b1032ce8be5317703cbb47ced4980", "__pomp_load_stack_incr", (DL_FUNC) __pomp_load_stack_incr);
R_RegisterCCallable("pomp_589b1032ce8be5317703cbb47ced4980", "__pomp_load_stack_decr", (DL_FUNC) __pomp_load_stack_decr);
R_RegisterCCallable("pomp_589b1032ce8be5317703cbb47ced4980", "__pomp_rinit", (DL_FUNC) __pomp_rinit);
R_RegisterCCallable("pomp_589b1032ce8be5317703cbb47ced4980", "__pomp_stepfn", (DL_FUNC) __pomp_stepfn);
R_RegisterCCallable("pomp_589b1032ce8be5317703cbb47ced4980", "__pomp_rmeasure", (DL_FUNC) __pomp_rmeasure);
R_RegisterCCallable("pomp_589b1032ce8be5317703cbb47ced4980", "__pomp_dmeasure", (DL_FUNC) __pomp_dmeasure);
R_RegisterCCallable("pomp_589b1032ce8be5317703cbb47ced4980", "__pomp_from_trans", (DL_FUNC) __pomp_from_trans);
R_RegisterCCallable("pomp_589b1032ce8be5317703cbb47ced4980", "__pomp_to_trans", (DL_FUNC) __pomp_to_trans);
}

> 
> pompExample(gillespie.sir)
'envir' chosen:<environment: 0x73196a0>
encoding = "native.enc" chosen
--> parsed 4 expressions; now eval(.)ing them:
has srcrefs:
List of 4
 $ : 'srcref' int [1:8] 1 1 1 13 1 13 1 1
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x7322130> 
 $ : 'srcref' int [1:8] 3 1 525 1 1 1 3 525
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x7322130> 
 $ : 'srcref' int [1:8] 527 1 637 18 1 18 527 637
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x7322130> 
 $ : 'srcref' int [1:8] 642 1 642 18 1 18 642 642
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x7322130> 

>>>> eval(expression_nr. 1 )
		 =================

> library(pomp)
curr.fun: symbol library
 .. after 'expression(library(pomp))'

>>>> eval(expression_nr. 2 )
		 =================

> dat <- '"time";"reports"
+ 0;0
+ 0,0192307692307692;5
+ 0,0384615384615385;5
+ 0,0576923076923077;2
+ 0,0769230769230769;2
+ 0,0961538461538462;3
+  .... [TRUNCATED] 
curr.fun: symbol <-
 .. after 'expression(dat <- '"time";"reports"''0;0''0,0192307692307692;5''0,0384615384615385;5''0,0576923076923077;2''0,0769230769230769;2''0,0961538461538462;3''0,115384615384615;2''0,134615384615385;2''0,153846153846154;1''0,173076923076923;3''0,192307692307692;2''0,211538461538462;3''0,230769230769231;1''0,25;1''0,269230769230769;2''0,288461538461538;1''0,307692307692308;2''0,326923076923077;3''0,346153846153846;1''0,365384615384615;0''0,384615384615385;0''0,403846153846154;2''0,423076923076923;1''0,442307692307692;0''0,461538461538462;1''0,480769230769231;2''0,5;0''0,519230769230769;0''0,538461538461539;0''0,557692307692308;1''0,576923076923077;2''0,596153846153846;0''0,615384615384615;1''0,634615384615385;2''0,653846153846154;0''0,673076923076923;2''0,692307692307692;2''0,711538461538462;3''0,730769230769231;1''0,75;1''0,769230769230769;0''0,788461538461539;1''0,807692307692308;1''0,826923076923077;0''0,846153846153846;3''0,865384615384615;2''0,884615384615385;10''0,903846153846154;3''0,923076923076923;4''0,942307692307692;2''0,961538461538462;2''0,980769230769231;11''1;4''1,01923076923077;8''1,03846153846154;4''1,05769230769231;1''1,07692307692308;7''1,09615384615385;7''1,11538461538462;5''1,13461538461538;3''1,15384615384615;2''1,17307692307692;7''1,19230769230769;9''1,21153846153846;9''1,23076923076923;5''1,25;3''1,26923076923077;4''1,28846153846154;12''1,30769230769231;3''1,32692307692308;11''1,34615384615385;2''1,36538461538462;10''1,38461538461538;9''1,40384615384615;5''1,42307692307692;10''1,44230769230769;10''1,46153846153846;8''1,48076923076923;7''1,5;7''1,51923076923077;5''1,53846153846154;10''1,55769230769231;10''1,57692307692308;13''1,59615384615385;14''1,61538461538462;22''1,63461538461538;18''1,65384615384615;22''1,67307692307692;16''1,69230769230769;27''1,71153846153846;24''1,73076923076923;24''1,75;36''1,76923076923077;42''1,78846153846154;35''1,80769230769231;43''1,82692307692308;50''1,84615384615385;62''1,86538461538462;47''1,88461538461538;58''1,90384615384615;50''1,92307692307692;57''1,94230769230769;51''1,96153846153846;50''1,98076923076923;54''2;61''2,01923076923077;64''2,03846153846154;58''2,05769230769231;61''2,07692307692308;80''2,09615384615385;48''2,11538461538462;61''2,13461538461538;59''2,15384615384615;59''2,17307692307692;57''2,19230769230769;39''2,21153846153846;42''2,23076923076923;45''2,25;55''2,26923076923077;26''2,28846153846154;40''2,30769230769231;50''2,32692307692308;40''2,34615384615385;49''2,36538461538462;44''2,38461538461538;57''2,40384615384615;44''2,42307692307692;56''2,44230769230769;40''2,46153846153846;54''2,48076923076923;59''2,5;67''2,51923076923077;52''2,53846153846154;51''2,55769230769231;57''2,57692307692308;66''2,59615384615385;69''2,61538461538462;61''2,63461538461538;63''2,65384615384615;55''2,67307692307692;59''2,69230769230769;59''2,71153846153846;75''2,73076923076923;62''2,75;66''2,76923076923077;80''2,78846153846154;53''2,80769230769231;69''2,82692307692308;53''2,84615384615385;56''2,86538461538462;50''2,88461538461538;45''2,90384615384615;41''2,92307692307692;40''2,94230769230769;32''2,96153846153846;39''2,98076923076923;35''3;25''3,01923076923077;32''3,03846153846154;15''3,05769230769231;20''3,07692307692308;19''3,09615384615385;16''3,11538461538462;11''3,13461538461538;14''3,15384615384615;16''3,17307692307692;11''3,19230769230769;8''3,21153846153846;6''3,23076923076923;3''3,25;8''3,26923076923077;8''3,28846153846154;2''3,30769230769231;3''3,32692307692308;4''3,34615384615385;8''3,36538461538462;7''3,38461538461539;4''3,40384615384615;9''3,42307692307692;7''3,44230769230769;8''3,46153846153846;5''3,48076923076923;5''3,5;7''3,51923076923077;1''3,53846153846154;6''3,55769230769231;7''3,57692307692308;6''3,59615384615385;5''3,61538461538462;8''3,63461538461539;10''3,65384615384615;1''3,67307692307692;0''3,69230769230769;5''3,71153846153846;8''3,73076923076923;1''3,75;8''3,76923076923077;8''3,78846153846154;5''3,80769230769231;7''3,82692307692308;3''3,84615384615385;7''3,86538461538462;4''3,88461538461539;6''3,90384615384615;7''3,92307692307692;6''3,94230769230769;7''3,96153846153846;7''3,98076923076923;5''4;5''4,01923076923077;7''4,03846153846154;2''4,05769230769231;8''4,07692307692308;3''4,09615384615385;3''4,11538461538462;5''4,13461538461539;1''4,15384615384615;3''4,17307692307692;5''4,19230769230769;5''4,21153846153846;2''4,23076923076923;3''4,25;6''4,26923076923077;1''4,28846153846154;2''4,30769230769231;2''4,32692307692308;5''4,34615384615385;3''4,36538461538462;3''4,38461538461539;7''4,40384615384615;2''4,42307692307692;2''4,44230769230769;2''4,46153846153846;3''4,48076923076923;4''4,5;4''4,51923076923077;7''4,53846153846154;1''4,55769230769231;5''4,57692307692308;12''4,59615384615385;5''4,61538461538462;8''4,63461538461539;3''4,65384615384615;17''4,67307692307692;14''4,69230769230769;15''4,71153846153846;12''4,73076923076923;19''4,75;19''4,76923076923077;17''4,78846153846154;23''4,80769230769231;28''4,82692307692308;23''4,84615384615385;32''4,86538461538462;24''4,88461538461539;35''4,90384615384615;31''4,92307692307692;23''4,94230769230769;41''4,96153846153846;27''4,98076923076923;28''5;26''5,01923076923077;29''5,03846153846154;38''5,05769230769231;20''5,07692307692308;17''5,09615384615385;29''5,11538461538462;31''5,13461538461539;25''5,15384615384615;31''5,17307692307692;26''5,19230769230769;23''5,21153846153846;36''5,23076923076923;25''5,25;25''5,26923076923077;35''5,28846153846154;37''5,30769230769231;32''5,32692307692308;30''5,34615384615385;41''5,36538461538462;45''5,38461538461539;61''5,40384615384615;40''5,42307692307692;43''5,44230769230769;46''5,46153846153846;49''5,48076923076923;59''5,5;48''5,51923076923077;69''5,53846153846154;61''5,55769230769231;68''5,57692307692308;79''5,59615384615385;91''5,61538461538462;93''5,63461538461539;77''5,65384615384615;87''5,67307692307692;107''5,69230769230769;103''5,71153846153846;119''5,73076923076923;111''5,75;110''5,76923076923077;91''5,78846153846154;120''5,80769230769231;106''5,82692307692308;93''5,84615384615385;69''5,86538461538462;90''5,88461538461539;100''5,90384615384615;73''5,92307692307692;72''5,94230769230769;67''5,96153846153846;63''5,98076923076923;41''6;43''6,01923076923077;33''6,03846153846154;40''6,05769230769231;29''6,07692307692308;25''6,09615384615385;22''6,11538461538462;19''6,13461538461539;15''6,15384615384615;18''6,17307692307692;13''6,19230769230769;15''6,21153846153846;14''6,23076923076923;10''6,25;8''6,26923076923077;13''6,28846153846154;4''6,30769230769231;10''6,32692307692308;3''6,34615384615385;9''6,36538461538462;10''6,38461538461539;9''6,40384615384615;4''6,42307692307692;4''6,44230769230769;3''6,46153846153846;2''6,48076923076923;6''6,5;4''6,51923076923077;5''6,53846153846154;3''6,55769230769231;8''6,57692307692308;3''6,59615384615385;6''6,61538461538462;5''6,63461538461539;6''6,65384615384615;1''6,67307692307692;8''6,69230769230769;12''6,71153846153846;10''6,73076923076923;3''6,75;3''6,76923076923077;6''6,78846153846154;5''6,80769230769231;10''6,82692307692308;6''6,84615384615385;6''6,86538461538462;5''6,88461538461539;11''6,90384615384615;6''6,92307692307692;14''6,94230769230769;7''6,96153846153846;6''6,98076923076923;5''7;4''7,01923076923077;7''7,03846153846154;3''7,05769230769231;4''7,07692307692308;3''7,09615384615385;3''7,11538461538462;2''7,13461538461539;3''7,15384615384615;7''7,17307692307692;2''7,19230769230769;2''7,21153846153846;3''7,23076923076923;3''7,25;5''7,26923076923077;2''7,28846153846154;3''7,30769230769231;7''7,32692307692308;2''7,34615384615385;6''7,36538461538462;2''7,38461538461539;5''7,40384615384615;5''7,42307692307692;6''7,44230769230769;5''7,46153846153846;8''7,48076923076923;9''7,5;5''7,51923076923077;5''7,53846153846154;15''7,55769230769231;9''7,57692307692308;18''7,59615384615385;17''7,61538461538462;10''7,63461538461539;16''7,65384615384615;15''7,67307692307692;19''7,69230769230769;14''7,71153846153846;23''7,73076923076923;28''7,75;32''7,76923076923077;32''7,78846153846154;31''7,80769230769231;40''7,82692307692308;37''7,84615384615385;41''7,86538461538462;37''7,88461538461539;40''7,90384615384615;38''7,92307692307692;44''7,94230769230769;35''7,96153846153846;34''7,98076923076923;26''8;49''8,01923076923077;32''8,03846153846154;45''8,05769230769231;38''8,07692307692308;31''8,09615384615385;26''8,11538461538461;27''8,13461538461539;26''8,15384615384616;26''8,17307692307692;22''8,19230769230769;33''8,21153846153846;36''8,23076923076923;27''8,25;36''8,26923076923077;39''8,28846153846154;36''8,30769230769231;30''8,32692307692308;39''8,34615384615385;28''8,36538461538461;31''8,38461538461539;40''8,40384615384616;47''8,42307692307692;41''8,44230769230769;42''8,46153846153846;42''8,48076923076923;50''8,5;60''8,51923076923077;53''8,53846153846154;64''8,55769230769231;59''8,57692307692308;65''8,59615384615385;61''8,61538461538462;69''8,63461538461539;66''8,65384615384616;71''8,67307692307692;71''8,69230769230769;72''8,71153846153846;94''8,73076923076923;79''8,75;79''8,76923076923077;78''8,78846153846154;78''8,80769230769231;92''8,82692307692308;64''8,84615384615385;70''8,86538461538462;50''8,88461538461539;63''8,90384615384616;58''8,92307692307692;53''8,94230769230769;48''8,96153846153846;51''8,98076923076923;28''9;36''9,01923076923077;40''9,03846153846154;20''9,05769230769231;16''9,07692307692308;19''9,09615384615385;16''9,11538461538462;20''9,13461538461539;16''9,15384615384616;11''9,17307692307692;9''9,19230769230769;15''9,21153846153846;15''9,23076923076923;7''9,25;12''9,26923076923077;9''9,28846153846154;5''9,30769230769231;4''9,32692307692308;3''9,34615384615385;4''9,36538461538462;4''9,38461538461539;5''9,40384615384616;3''9,42307692307692;2''9,44230769230769;2''9,46153846153846;3''9,48076923076923;3''9,5;5''9,51923076923077;3''9,53846153846154;3''9,55769230769231;6''9,57692307692308;6''9,59615384615385;5''9,61538461538462;2''9,63461538461539;5''9,65384615384616;5''9,67307692307692;3''9,69230769230769;3''9,71153846153846;3''9,73076923076923;4''9,75;3''9,76923076923077;9''9,78846153846154;4''9,80769230769231;2''9,82692307692308;5''9,84615384615385;4''9,86538461538462;2''9,88461538461539;4''9,90384615384616;5''9,92307692307692;3''9,94230769230769;2''9,96153846153846;3''9,98076923076923;2''10;6''')'

>>>> eval(expression_nr. 3 )
		 =================

> pomp(
+      data=read.csv2(text=dat),
+      times="time",
+      t0=0,
+      params=c(
+        gamma=24,mu=1/70,iota=0.1,
+        beta1=330,bet .... [TRUNCATED] 
model codes written to '/tmp/Rtmpks7IPq/99282/pomp_f255d927ac7eae1770214645dd5f249c.c' 
compiling '/tmp/Rtmpks7IPq/99282/pomp_f255d927ac7eae1770214645dd5f249c.so' 
compiler messages:
make[2]: Entering directory `/userdata/kingaa/projects/Rpkg/pomp1/tests'
gcc -std=gnu99 -I"/usr/local/apps/R/R-3.5.1/lib64/R/include" -DNDEBUG -I/userdata/kingaa/projects/Rpkg/pomp1/library/pomp/include -I/userdata/kingaa/projects/Rpkg/pomp1/tests  -I/usr/local/include   -fpic  -g -O2 -Wall -pedantic -c /tmp/Rtmpks7IPq/99282/pomp_f255d927ac7eae1770214645dd5f249c.c -o /tmp/Rtmpks7IPq/99282/pomp_f255d927ac7eae1770214645dd5f249c.o
gcc -std=gnu99 -shared -L/usr/local/apps/R/R-3.5.1/lib64/R/lib -L/usr/local/lib64 -o /tmp/Rtmpks7IPq/99282/pomp_f255d927ac7eae1770214645dd5f249c.so /tmp/Rtmpks7IPq/99282/pomp_f255d927ac7eae1770214645dd5f249c.o -L/usr/local/apps/R/R-3.5.1/lib64/R/lib -lR
make[2]: Leaving directory `/userdata/kingaa/projects/Rpkg/pomp1/tests'
make[2]: Entering directory `/userdata/kingaa/projects/Rpkg/pomp1/tests'
make[2]: Leaving directory `/userdata/kingaa/projects/Rpkg/pomp1/tests'
curr.fun: symbol <-
 .. after 'expression(pomp(''     data=read.csv2(text=dat),''     times="time",''     t0=0,''     params=c(''       gamma=24,mu=1/70,iota=0.1,''       beta1=330,beta2=410,beta3=490,''       rho=0.1,''       S_0=0.05,I_0=1e-4,R_0=0.95,''       pop=1000000,''       beta.sd=0''       ),''     globals="''      int nbasis = 3, deg = 3;''      double period = 1.0;",''     rprocess=gillespie.hl.sim(''       .pre="''          double beta;''          const double *xbeta = &beta1;''          double seasonality[nbasis];''          int k;",''       birth=list(''          "rate = mu*pop;",''          c(S=1,I=0,R=0,N=1,cases=0)),''       susc.death=list(''          "rate = mu*S;",''          c(S=-1,I=0,R=0,N=-1,cases=0)),''       infection=list(''          "periodic_bspline_basis_eval(t,period,deg,nbasis,&seasonality[0]);''           for (k = 0, beta = 0; k < nbasis; k++) beta += seasonality[k]*xbeta[k];''           rate = (beta*I+iota)*S/pop;",''          c(S=-1,I=1,N=0,R=0,cases=0)),''       inf.death=list(''          "rate = mu*I;",''          c(S=0,I=-1,R=0,N=-1,cases=0)),''       recovery=list(''          "rate = gamma*I;",''          c(S=0,I=-1,R=1,N=0,cases=1)),''       recov.death=list(''          "rate = mu*R;",''          c(S=0,I=0,R=-1,N=-1,cases=0)),''       hmax=0.05),''     skeleton=vectorfield(''       Csnippet("''        int nrate = 6;''        double rate[nrate];''        double term[nrate];''        double beta;''        const double *xbeta = &beta1;''        double seasonality[nbasis];''        int k;''        periodic_bspline_basis_eval(t,period,deg,nbasis,&seasonality[0]);''        for (k = 0, beta = 0; k < nbasis; k++) beta += seasonality[k]*xbeta[k];''''        rate[0] = mu*pop;''        rate[1] = (iota+beta*I)/pop;''        rate[2] = mu;''        rate[3] = gamma;''        rate[4] = mu;''        rate[5] = mu;''''        term[0] = rate[0];''        term[1] = rate[1]*S;''        term[2] = rate[2]*S;''        term[3] = rate[3]*I;''        term[4] = rate[4]*I;''        term[5] = rate[5]*R;''''        DS = term[0]-term[1]-term[2];''        DI = term[1]-term[3]-term[4];''        DR = term[3]-term[5];''        Dcases = term[3];")),''measurement.model=reports~binom(size=cases,prob=rho),''statenames=c("S","I","R","N","cases"),''paramnames=c(''  "gamma","mu","iota",''  "beta1","beta.sd","pop","rho",''  "S_0","I_0","R_0"''),''zeronames=c("cases"),''fromEstimationScale=Csnippet("''  int k;''  const double *xbeta = &beta1;''  double *xtbeta = &Tbeta1;''  Tgamma = exp(gamma);''  Tmu = exp(mu);''  Tiota = exp(iota);''  for (k = 0; k < nbasis; k++) xtbeta[k] = exp(xbeta[k]);''  Tbeta_sd = exp(beta_sd);''  Trho = expit(rho);''  from_log_barycentric(&TS_0,&S_0,3);"),''toEstimationScale=Csnippet("''  int k;''  const double *xbeta = &beta1;''  double *xtbeta = &Tbeta1;''  Tgamma = log(gamma);''  Tmu = log(mu);''  Tiota = log(iota);''  for (k = 0; k < nbasis; k++) xtbeta[k] = log(xbeta[k]);''  Tbeta_sd = log(beta_sd);''  Trho = logit(rho);''  to_log_barycentric(&TS_0,&S_0,3);"),''initializer=Csnippet("''  double m;''  m = pop/(S_0+I_0+R_0);''  S = nearbyint(m*S_0);''  I = nearbyint(m*I_0);''  N = nearbyint(pop);''  R = nearbyint(m*R_0);''  cases = 0;"),'') -> gillespie.sir)'

>>>> eval(expression_nr. 4 )
		 =================

> ## originally, the data were created via:
> ## simulate(po,nsim=1,seed=1165270654L) -> gillespie.sir
> 
> c("gillespie.sir")
curr.fun: symbol c
[1] "gillespie.sir"
 .. after 'expression(c("gillespie.sir"))'
newly created object(s):
 gillespie.sir 
Warning messages:
1: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/userdata/kingaa/projects/Rpkg/pomp1/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
2: In library(pomp) : package 'pomp' already present in search()
3: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/userdata/kingaa/projects/Rpkg/pomp1/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
> spy(gillespie.sir)
==================
pomp object 'gillespie.sir':

- 521 records of 1 observable, recorded from t = 0 to 10 
- zero time, t0 = 0
- summary of data:
    reports     
 Min.   :  0.0  
 1st Qu.:  4.0  
 Median : 10.0  
 Mean   : 23.7  
 3rd Qu.: 40.0  
 Max.   :120.0  
- Gillespie-method process-model simulator, rate.fun = native function '__pomp_ratefn', defined by a Csnippet
- process model density, dprocess = not specified
- measurement model simulator, rmeasure = function (x, t, params, covars, ...) 
{
    y <- numeric(length = nobs)
    names(y) <- obsnames
    for (k in seq_len(nobs)) {
        y[k] <- eval(rcalls[[k]], envir = as.list(c(x, params, 
            covars, t = t)))
    }
    y
}
<bytecode: 0x65e2018>
<environment: 0x65e10c8>
- measurement model density, dmeasure = function (y, x, t, params, log, covars, ...) 
{
    f <- 0
    for (k in seq_len(nobs)) {
        f <- f + eval(dcalls[[k]], envir = as.list(c(y, x, params, 
            covars, t = t)))
    }
    if (log) 
        f
    else exp(f)
}
<bytecode: 0x65dedb8>
<environment: 0x65e10c8>
- prior simulator, rprior = not specified
- prior density, dprior = native function '_pomp_default_dprior', dynamically loaded from 'pomp'
- skeleton (vectorfield) = native function '__pomp_skelfn', defined by a Csnippet
- initializer = native function '__pomp_rinit', defined by a Csnippet
- parameter transformation (to estimation scale) = native function '__pomp_to_trans', defined by a Csnippet
- parameter transformation (from estimation scale) = native function '__pomp_from_trans', defined by a Csnippet
- parameter(s):
   gamma       mu     iota    beta1    beta2    beta3      rho      S_0 
2.40e+01 1.43e-02 1.00e-01 3.30e+02 4.10e+02 4.90e+02 1.00e-01 5.00e-02 
     I_0      R_0      pop  beta.sd 
1.00e-04 9.50e-01 1.00e+06 0.00e+00 
- C snippet file 1:

/* pomp C snippet file: pomp_f255d927ac7eae1770214645dd5f249c */
/* Time: 2018-12-13 12:56:03.210 -0500 */
/* Salt: C18C07759B24E50E36C93349 */

#include <pomp.h>
#include <R_ext/Rdynload.h>


      int nbasis = 3, deg = 3;
      double period = 1.0; 

static periodic_bspline_basis_eval_t *__pomp_periodic_bspline_basis_eval;
#define periodic_bspline_basis_eval(X,Y,M,N,Z)	(__pomp_periodic_bspline_basis_eval((X),(Y),(M),(N),(Z)))


/* C snippet: 'initializer' */
#define gamma		(__p[__parindex[0]])
#define mu		(__p[__parindex[1]])
#define iota		(__p[__parindex[2]])
#define beta1		(__p[__parindex[3]])
#define beta_sd		(__p[__parindex[4]])
#define pop		(__p[__parindex[5]])
#define rho		(__p[__parindex[6]])
#define S_0		(__p[__parindex[7]])
#define I_0		(__p[__parindex[8]])
#define R_0		(__p[__parindex[9]])
#define S		(__x[__stateindex[0]])
#define I		(__x[__stateindex[1]])
#define R		(__x[__stateindex[2]])
#define N		(__x[__stateindex[3]])
#define cases		(__x[__stateindex[4]])

void __pomp_rinit (double *__x, const double *__p, double t, const int *__stateindex, const int *__parindex, const int *__covindex, const double *__covars)
{
 
  double m;
  m = pop/(S_0+I_0+R_0);
  S = nearbyint(m*S_0);
  I = nearbyint(m*I_0);
  N = nearbyint(pop);
  R = nearbyint(m*R_0);
  cases = 0; 
}

#undef gamma
#undef mu
#undef iota
#undef beta1
#undef beta_sd
#undef pop
#undef rho
#undef S_0
#undef I_0
#undef R_0
#undef S
#undef I
#undef R
#undef N
#undef cases

/* C snippet: 'rate.fn' */
#define gamma		(__p[__parindex[0]])
#define mu		(__p[__parindex[1]])
#define iota		(__p[__parindex[2]])
#define beta1		(__p[__parindex[3]])
#define beta_sd		(__p[__parindex[4]])
#define pop		(__p[__parindex[5]])
#define rho		(__p[__parindex[6]])
#define S_0		(__p[__parindex[7]])
#define I_0		(__p[__parindex[8]])
#define R_0		(__p[__parindex[9]])
#define S		(__x[__stateindex[0]])
#define I		(__x[__stateindex[1]])
#define R		(__x[__stateindex[2]])
#define N		(__x[__stateindex[3]])
#define cases		(__x[__stateindex[4]])

double __pomp_ratefn (int j, double t, double *__x, const double *__p, const int *__stateindex, const int *__parindex, const int *__covindex, int __covdim, const double *__covars)
{
  double rate = 0.0;  
 
          double beta;
          const double *xbeta = &beta1;
          double seasonality[nbasis];
          int k;
switch (j) {
case 1:
{
rate = mu*pop;
}
break;

case 2:
{
rate = mu*S;
}
break;

case 3:
{
periodic_bspline_basis_eval(t,period,deg,nbasis,&seasonality[0]);
           for (k = 0, beta = 0; k < nbasis; k++) beta += seasonality[k]*xbeta[k];
           rate = (beta*I+iota)*S/pop;
}
break;

case 4:
{
rate = mu*I;
}
break;

case 5:
{
rate = gamma*I;
}
break;

case 6:
{
rate = mu*R;
}
break;

default:
error("unrecognized event %d",j);
break;
}
   return rate;
}

#undef gamma
#undef mu
#undef iota
#undef beta1
#undef beta_sd
#undef pop
#undef rho
#undef S_0
#undef I_0
#undef R_0
#undef S
#undef I
#undef R
#undef N
#undef cases

/* C snippet: 'fromEstimationScale' */
#define gamma		(__p[__parindex[0]])
#define mu		(__p[__parindex[1]])
#define iota		(__p[__parindex[2]])
#define beta1		(__p[__parindex[3]])
#define beta_sd		(__p[__parindex[4]])
#define pop		(__p[__parindex[5]])
#define rho		(__p[__parindex[6]])
#define S_0		(__p[__parindex[7]])
#define I_0		(__p[__parindex[8]])
#define R_0		(__p[__parindex[9]])
#define Tgamma		(__pt[__parindex[0]])
#define Tmu		(__pt[__parindex[1]])
#define Tiota		(__pt[__parindex[2]])
#define Tbeta1		(__pt[__parindex[3]])
#define Tbeta_sd		(__pt[__parindex[4]])
#define Tpop		(__pt[__parindex[5]])
#define Trho		(__pt[__parindex[6]])
#define TS_0		(__pt[__parindex[7]])
#define TI_0		(__pt[__parindex[8]])
#define TR_0		(__pt[__parindex[9]])

void __pomp_from_trans (double *__pt, const double *__p, const int *__parindex)
{
 
  int k;
  const double *xbeta = &beta1;
  double *xtbeta = &Tbeta1;
  Tgamma = exp(gamma);
  Tmu = exp(mu);
  Tiota = exp(iota);
  for (k = 0; k < nbasis; k++) xtbeta[k] = exp(xbeta[k]);
  Tbeta_sd = exp(beta_sd);
  Trho = expit(rho);
  from_log_barycentric(&TS_0,&S_0,3); 
}

#undef gamma
#undef mu
#undef iota
#undef beta1
#undef beta_sd
#undef pop
#undef rho
#undef S_0
#undef I_0
#undef R_0
#undef Tgamma
#undef Tmu
#undef Tiota
#undef Tbeta1
#undef Tbeta_sd
#undef Tpop
#undef Trho
#undef TS_0
#undef TI_0
#undef TR_0

/* C snippet: 'toEstimationScale' */
#define gamma		(__p[__parindex[0]])
#define mu		(__p[__parindex[1]])
#define iota		(__p[__parindex[2]])
#define beta1		(__p[__parindex[3]])
#define beta_sd		(__p[__parindex[4]])
#define pop		(__p[__parindex[5]])
#define rho		(__p[__parindex[6]])
#define S_0		(__p[__parindex[7]])
#define I_0		(__p[__parindex[8]])
#define R_0		(__p[__parindex[9]])
#define Tgamma		(__pt[__parindex[0]])
#define Tmu		(__pt[__parindex[1]])
#define Tiota		(__pt[__parindex[2]])
#define Tbeta1		(__pt[__parindex[3]])
#define Tbeta_sd		(__pt[__parindex[4]])
#define Tpop		(__pt[__parindex[5]])
#define Trho		(__pt[__parindex[6]])
#define TS_0		(__pt[__parindex[7]])
#define TI_0		(__pt[__parindex[8]])
#define TR_0		(__pt[__parindex[9]])

void __pomp_to_trans (double *__pt, const double *__p, const int *__parindex)
{
 
  int k;
  const double *xbeta = &beta1;
  double *xtbeta = &Tbeta1;
  Tgamma = log(gamma);
  Tmu = log(mu);
  Tiota = log(iota);
  for (k = 0; k < nbasis; k++) xtbeta[k] = log(xbeta[k]);
  Tbeta_sd = log(beta_sd);
  Trho = logit(rho);
  to_log_barycentric(&TS_0,&S_0,3); 
}

#undef gamma
#undef mu
#undef iota
#undef beta1
#undef beta_sd
#undef pop
#undef rho
#undef S_0
#undef I_0
#undef R_0
#undef Tgamma
#undef Tmu
#undef Tiota
#undef Tbeta1
#undef Tbeta_sd
#undef Tpop
#undef Trho
#undef TS_0
#undef TI_0
#undef TR_0

/* C snippet: 'skeleton' */
#define gamma		(__p[__parindex[0]])
#define mu		(__p[__parindex[1]])
#define iota		(__p[__parindex[2]])
#define beta1		(__p[__parindex[3]])
#define beta_sd		(__p[__parindex[4]])
#define pop		(__p[__parindex[5]])
#define rho		(__p[__parindex[6]])
#define S_0		(__p[__parindex[7]])
#define I_0		(__p[__parindex[8]])
#define R_0		(__p[__parindex[9]])
#define S		(__x[__stateindex[0]])
#define I		(__x[__stateindex[1]])
#define R		(__x[__stateindex[2]])
#define N		(__x[__stateindex[3]])
#define cases		(__x[__stateindex[4]])
#define DS		(__f[__stateindex[0]])
#define DI		(__f[__stateindex[1]])
#define DR		(__f[__stateindex[2]])
#define DN		(__f[__stateindex[3]])
#define Dcases		(__f[__stateindex[4]])

void __pomp_skelfn (double *__f, const double *__x, const double *__p, const int *__stateindex, const int *__parindex, const int *__covindex, int __ncovars, const double *__covars, double t)
{
 
        int nrate = 6;
        double rate[nrate];
        double term[nrate];
        double beta;
        const double *xbeta = &beta1;
        double seasonality[nbasis];
        int k;
        periodic_bspline_basis_eval(t,period,deg,nbasis,&seasonality[0]);
        for (k = 0, beta = 0; k < nbasis; k++) beta += seasonality[k]*xbeta[k];

        rate[0] = mu*pop;
        rate[1] = (iota+beta*I)/pop;
        rate[2] = mu;
        rate[3] = gamma;
        rate[4] = mu;
        rate[5] = mu;

        term[0] = rate[0];
        term[1] = rate[1]*S;
        term[2] = rate[2]*S;
        term[3] = rate[3]*I;
        term[4] = rate[4]*I;
        term[5] = rate[5]*R;

        DS = term[0]-term[1]-term[2];
        DI = term[1]-term[3]-term[4];
        DR = term[3]-term[5];
        Dcases = term[3]; 
}

#undef gamma
#undef mu
#undef iota
#undef beta1
#undef beta_sd
#undef pop
#undef rho
#undef S_0
#undef I_0
#undef R_0
#undef S
#undef I
#undef R
#undef N
#undef cases
#undef DS
#undef DI
#undef DR
#undef DN
#undef Dcases

static int __pomp_load_stack = 0;

void __pomp_load_stack_incr (void) {++__pomp_load_stack;}

void __pomp_load_stack_decr (int *val) {*val = --__pomp_load_stack;}

void R_init_pomp_f255d927ac7eae1770214645dd5f249c (DllInfo *info)
{
__pomp_periodic_bspline_basis_eval = (periodic_bspline_basis_eval_t *) R_GetCCallable("pomp","periodic_bspline_basis_eval");
R_RegisterCCallable("pomp_f255d927ac7eae1770214645dd5f249c", "__pomp_load_stack_incr", (DL_FUNC) __pomp_load_stack_incr);
R_RegisterCCallable("pomp_f255d927ac7eae1770214645dd5f249c", "__pomp_load_stack_decr", (DL_FUNC) __pomp_load_stack_decr);
R_RegisterCCallable("pomp_f255d927ac7eae1770214645dd5f249c", "__pomp_rinit", (DL_FUNC) __pomp_rinit);
R_RegisterCCallable("pomp_f255d927ac7eae1770214645dd5f249c", "__pomp_ratefn", (DL_FUNC) __pomp_ratefn);
R_RegisterCCallable("pomp_f255d927ac7eae1770214645dd5f249c", "__pomp_from_trans", (DL_FUNC) __pomp_from_trans);
R_RegisterCCallable("pomp_f255d927ac7eae1770214645dd5f249c", "__pomp_to_trans", (DL_FUNC) __pomp_to_trans);
R_RegisterCCallable("pomp_f255d927ac7eae1770214645dd5f249c", "__pomp_skelfn", (DL_FUNC) __pomp_skelfn);
}

> show(gillespie.sir)
<object of class 'pomp'>
> 
